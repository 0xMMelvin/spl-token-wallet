{"version":3,"sources":["utils/walletProvider/ledger-core.js","utils/walletProvider/ledger.js","components/CopyableDisplay.js","components/TokenInfoDialog.js","utils/config.js","utils/swap/api.js","components/TokenIcon.js","components/AddTokenDialog.js","components/ExportAccountDialog.js","utils/swap/eth.js","components/SendDialog.js","components/DepositDialog.js","components/CloseTokenAccountButton.js","components/EditAccountNameDialog.js","components/MergeAccountsDialog.js","components/BalancesList.js","utils/connection.tsx","utils/wallet.js","utils/utils.ts","utils/walletProvider/factory.js","pages/LoginPage.js","utils/tokens/instructions.js","components/DialogForm.js","utils/tokens/data.js","utils/fetch-loop.ts","utils/notifications.js","utils/tokens/index.js","utils/wallet-seed.js","components/SolanaIcon.js","components/AddAccountDialog.js","components/DeleteAccountDialog.js","components/AddHarwareWalletDialog.js","components/NavigationFrame.js","components/DebugButtons.js","pages/WalletPage.js","utils/transactions.js","components/instructions/LabelValue.js","components/instructions/NewOrder.js","components/instructions/UnknownInstruction.js","components/instructions/SystemInstruction.js","components/instructions/DexInstruction.js","components/instructions/TokenInstruction.js","pages/PopupPage.js","App.js","serviceWorker.js","index.js","utils/tokens/names.js","components/LoadingIndicator.js","utils/walletProvider/localStorage.js"],"names":["bs58","require","MAX_PAYLOAD","LEDGER_CLA","solana_send","transport","instruction","p1","payload","a","p2","payload_offset","length","buf","slice","console","log","toString","send","Error","reply","_harden","n","solana_derivation_path","account","change","useAccount","useChange","derivation_path","Buffer","alloc","offset","writeUInt8","writeUInt32BE","solana_ledger_get_pubkey","solana_ledger_sign_transaction","transaction","msg_bytes","serializeMessage","solana_ledger_sign_bytes","num_paths","concat","getPublicKey","path","from_derivation_path","from_pubkey_bytes","from_pubkey_string","encode","PublicKey","LedgerWalletProvider","args","init","TransportWebUsb","create","pubKey","on","onDisconnect","listAddresses","walletCount","this","signTransaction","sig_bytes","addSignature","publicKey","createSignature","message","useStyles","makeStyles","theme","root","display","marginTop","spacing","marginBottom","alignItems","CopyableDisplay","value","label","autoFocus","qrCode","helperText","enqueueSnackbar","useSnackbar","textareaRef","useRef","classes","className","TextField","inputRef","ref","current","multiline","readOnly","onFocus","e","currentTarget","select","textArea","fullWidth","spellCheck","IconButton","onClick","document","execCommand","variant","autoHideDuration","useQrCodeStyles","qrcodeContainer","flexDirection","Qrcode","React","useState","showQrcode","setShowQrcode","Dialog","open","onClose","DialogContent","size","includeMargin","explorerLink","warning","container","minWidth","TokenInfoDialog","balanceInfo","mint","tokenName","tokenSymbol","urlSuffix","useSolanaExplorerUrlSuffix","DialogForm","DialogTitle","abbreviateAddress","Typography","Link","href","toBase58","target","rel","showTokenInfoDialog","localStorage","getItem","SwapApiError","msg","status","name","swapApiRequest","method","body","ignoreUserErrors","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","error","result","useSwapApiGet","options","useAsyncData","undefined","TokenIcon","url","endpoint","useConnectionConfig","hasError","setHasError","TOKENS","find","token","mintAddress","icon","src","title","alt","style","width","height","backgroundColor","borderRadius","onError","feeFormat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","tabs","borderBottom","palette","background","paper","AddTokenDialog","wallet","useWallet","tokenAccountCost","updateTokenName","useUpdateTokenName","useSendTransaction","sendTransaction","sending","popularTokens","useWalletTokenAccounts","walletAccounts","tab","setTab","setMintAddress","setTokenName","setTokenSymbol","erc20Address","setErc20Address","onSubmit","addToken","onSuccess","refreshWalletPublicKeys","tokenInfo","splMint","ticker","blockchain","createAssociatedTokenAccount","useEffect","valid","startsWith","DialogContentText","format","LAMPORTS_PER_SOL","LoadingIndicator","Tabs","textColor","indicatorColor","onChange","Tab","List","disablePadding","filter","deprecated","map","TokenListItem","existingAccount","parsed","disalbed","margin","trim","disabled","Fragment","DialogActions","Button","type","color","setOpen","alreadyExists","ListItem","button","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","ExportAccountDialog","isHidden","setIsHidden","keyOutput","Array","from","provider","secretKey","FormControlLabel","control","Switch","checked","web3","Web3","window","ethereum","useEthAccount","setAccount","accounts","request","then","removeListener","getErc20Balance","parseInt","eth","getBalance","erc20","Contract","ERC20_ABI","Promise","all","methods","balanceOf","call","decimals","swapErc20ToSpl","ethAccount","swapAddress","destination","amount","onStatusChange","swapEthToSpl","swap","SWAP_ABI","encodedAmount","addDecimals","approveTx","approve","waitForTxid","step","swapTx","swapErc20","gasLimit","swapTxid","txid","confirms","waitForConfirms","swapEth","str","test","includes","split","intStr","fractionStr","repeat","replace","pendingNonces","Set","withdrawal","callAsync","txData","signature","withdrawErc20","nonce","withdrawEth","has","estimateGas","add","progressMessage","coin","delete","tx","resolve","reject","once","catch","resolved","receipt","ConnectToMetamaskButton","useCallAsync","component","successMessage","WUSDC_MINT","USDC_MINT","SendDialog","isProdNetwork","useIsProdNetwork","onSubmitRef","swapCoinInfo","fontSize","equals","erc20Contract","SendSplDialog","SendSwapDialog","wusdcToSplUsdc","EthWithdrawalCompleter","defaultAddressHelperText","WRAPPED_SOL_MINT","addressHelperText","setAddressHelperText","passValidation","setPassValidation","overrideDestinationCheck","setOverrideDestinationCheck","shouldShowOverride","setShouldShowOverride","useForm","fields","destinationAddress","transferAmountString","validAmount","mintString","makeTransaction","Math","round","parseFloat","transferToken","connection","getAccountInfo","destinationAccountInfo","owner","TOKEN_PROGRAM_ID","parseTokenAccountData","data","setSignature","setDestinationAddress","needMetamask","splUsdcWalletAddress","useWalletAddressForMint","address","wusdcToUsdc","swapInfo","memo","SendSwapProgress","paddingTop","useConnection","refreshInterval","swaps","getSignatureStatus","confirmations","ethTxid","deposit","Stepper","activeStep","Step","StepLabel","align","justifyContent","marginRight","CircularProgress","passAddressValidation","overrideValidation","setTransferAmountString","balanceAmount","parsedAmount","id","InputProps","endAdornment","InputAdornment","position","balanceAmountToUserAmount","inputProps","pow","toFixed","EthWithdrawalCompleterItem","DepositDialog","firstTab","secondTab","SolletSwapDepositAddress","MetamaskDeposit","setAmount","submitted","setSubmitted","setStatus","maxSize","Infinity","min","tuple","maxAmount","maxAmountLoaded","marginLeft","CloseTokenAccountDialog","closeTokenAccount","EditAccountNameDialog","oldName","onEdit","setName","onEnter","MergeAccountsDialog","useWalletPublicKeys","publicKeys","isMerging","setIsMerging","mergeCheck","setMergeCheck","mergeAccounts","retryCount","getMultipleSolanaAccounts","tokenAccounts","acc","TokenInstructions","groupedTokenAccounts","forEach","ta","key","push","mints","Object","keys","k","mintGroup","findAssociatedTokenAddress","assocTokAddr","getTokenName","_rpcEndpoint","symbol","mergeMint","sleep","refresh","close","toLowerCase","disableBackdropClick","textAlign","padding","err","mintAccountSet","assocTok","tokAddr","pop","splTokenMintAddress","associatedTokenAccount","tokenAccount","transferAndClose","refreshAccountInfo","balanceFormat","useGrouping","serumMarkets","m","MARKETS","market","join","BalancesList","loaded","showAddTokenDialog","setShowAddTokenDialog","showEditAccountNameDialog","setShowEditAccountNameDialog","showMergeAccounts","setShowMergeAccounts","useWalletSelector","setAccountName","selectedAccount","isSelected","Paper","AppBar","elevation","Toolbar","flexGrow","Tooltip","arrow","BalanceListItem","selector","textOverflow","overflowX","itemDetails","buttonContainer","expandable","useBalanceInfo","isAssociatedToken","setIsAssociatedToken","price","setPrice","toUpperCase","_priceStore","getPrice","delay","subtitle","overflow","flex","secondary","secondaryTypographyProps","BalanceListItemDetails","sendDialogOpen","setSendDialogOpen","depositDialogOpen","setDepositDialogOpen","tokenInfoDialogOpen","setTokenInfoDialogOpen","exportAccDialogOpen","setExportAccDialogOpen","closeTokenAccountDialogOpen","setCloseTokenAccountDialogOpen","exportNeedsDisplay","allowsExport","startIcon","marketName","MAINNET_URL","asks","bids","mid","ConnectionContext","createContext","ConnectionProvider","children","useLocalStorageState","setEndpoint","useMemo","Connection","Provider","context","useContext","clusterApiUrl","useAccountInfo","cacheKey","accountInfo","previousInfo","onAccountChange","info","lamports","setCache","removeAccountChangeListener","useRefEqual","oldInfo","newInfo","clearCache","refreshCache","setInitialAccountInfo","initializeOnly","commitment","_rpcRequest","unsafeRes","res","GetMultipleAccountsAndContextRpcResult","assert","executable","idx","resultDescription","AccountInfoResult","struct","rentEpoch","array","union","jsonRpcVersion","literal","jsonrpc","jsonRpcResult","slot","DEFAULT_WALLET_SELECTOR","walletIndex","importedPubkey","ledger","Wallet","getTokenAccountInfo","getOwnedTokenAccounts","sort","account1","account2","localeCompare","createTokenAccount","tokenAddress","createAndInitializeTokenAccount","payer","mintPublicKey","newAccount","Account","getMinimumBalanceForRentExemption","ACCOUNT_LAYOUT","span","source","transferSol","transferTokens","sourcePublicKey","destinationPublicKey","nativeTransfer","skipPreflight","WalletProviderFactory","getProvider","instance","WalletContext","WalletProvider","useListener","walletSeedChanged","getUnlockedMnemonicAndSeed","mnemonic","seed","importsEncryptionKey","derivationPath","setWallet","privateKeyImports","setPrivateKeyImports","walletSelector","setWalletSelector","ledgerPubKey","setLedgerPubKey","setWalletCount","statusCode","getAccountFromSeed","ciphertext","nacl","secretbox","getWalletNames","walletNames","setWalletNames","seedBuffer","derivedAccounts","importedAccounts","pubkey","addAccount","importedAccount","setItem","randomBytes","nonceLength","plaintext","newPrivateKeyImports","newName","tokenAccountInfo","oldKeys","newKeys","every","i","accountInfoLoaded","mintInfo","mintInfoLoaded","useTokenName","parseMintData","ms","setTimeout","defaultState","storedState","parse","state","setState","setLocalStorageState","useCallback","newState","removeItem","useEffectAfterTimeout","effect","handle","clearTimeout","emitter","eventName","forceUpdate","listener","areEqual","prevRef","base58","confirmTransaction","startTime","Date","getTime","LocalStorageWalletProvider","LoginPage","restore","setRestore","maxWidth","RestoreWalletForm","goBack","hasLockedMnemonicAndSeed","LoginForm","CreateWalletForm","cursor","mnemonicAndSeed","setMnemonicAndSeed","generateMnemonicAndSeed","savedWords","setSavedWords","ChoosePasswordForm","password","storeMnemonicAndSeed","DERIVATION_PATH","bip44Change","SeedWordsForm","goForward","confirmed","setConfirmed","gutterBottom","paragraph","setPassword","passwordConfirm","setPasswordConfirm","autoComplete","stayLoggedIn","setStayLoggedIn","loadMnemonicAndSeed","setMnemonic","setSeed","next","setNext","isNextBtnEnabled","validateMnemonic","DerivedAccounts","rows","mnemonicToSeed","DerivationPathMenuItem","Bip44Change","dPathMenuItem","setDPathMenuItem","_","toDerivationPath","Bip44","Deprecated","walletAccount","bip44","MEMO_PROGRAM_ID","LAYOUT","BufferLayout","addVariant","instructionMaxSpan","max","values","registry","r","encodeTokenInstructionData","b","initializeMint","mintAuthority","freezeAuthority","isSigner","isWritable","SYSVAR_RENT_PUBKEY","TransactionInstruction","toBuffer","freezeAuthorityOption","programId","initializeAccount","transfer","mintTo","closeAccount","memoInstruction","OWNER_VALIDATION_PROGRAM_ID","OWNER_VALIDATION_LAYOUT","publicKeyLayout","encodeOwnerValidationInstruction","assertOwner","rest","useTheme","fullScreen","useMediaQuery","breakpoints","down","PaperProps","preventDefault","MINT_LAYOUT","decode","getOwnedAccountsFilters","memcmp","offsetOf","bytes","dataSize","pageLoadTime","globalCache","Map","globalLoops","loops","set","FetchLoopInternal","fn","get","addListener","loop","stopped","FetchLoopListener","callback","timeoutId","listeners","errors","notifyListeners","warn","waitTime","timeSincePageLoad","visibilityState","hasFocus","random","previousRefreshInterval","asyncFn","useReducer","rerender","formatCacheKey","isArray","closeSnackbar","setSending","signaturePromise","persist","action","ViewTransactionOnExplorerButton","promise","filters","filterBytes","signAndSendTransaction","signers","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","rawTransaction","serialize","sendRawTransaction","preflightCommitment","Transaction","SystemProgram","fromPubkey","toPubkey","createAndInitializeMint","initialAccount","newAccountPubkey","space","createAccount","createAssociatedTokenAccountIx","ix","feePayer","txSig","fundingAddress","walletAddress","associatedTokenAddress","systemProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","tokenMintAddress","findProgramAddress","transferBetweenSplTokenAccounts","destinationSplTokenAccount","createAndTransferToAccount","createTransferBetweenSplTokenAccountsInstruction","ownerPublicKey","transferBetweenAccountsTxn","bip39","generateMnemonic","unlockedMnemonicAndSeed","stored","sessionStorage","deriveImportsEncryptionKey","EventEmitter","setUnlockedMnemonicAndSeed","emit","salt","kdf","iterations","digest","deriveEncryptionKey","encrypted","encodedEncrypted","encodedNonce","encodedSalt","decodedPlaintext","pbkdf2","keyLength","bip32","derivePath","privateKey","forgetWallet","clear","location","reload","SolanaIcon","SvgIcon","viewBox","d","AddAccountDialog","onAdd","isImport","setIsImport","importedPrivateKey","setPrivateKey","decodeAccount","isAddEnabled","FormGroup","DeleteAccountDialog","isDeleteAccountEnabled","AddHardwareWalletDialog","setPubKey","content","paddingBottom","paddingLeft","paddingRight","menuItemIcon","NavigationFrame","WalletSelector","NetworkSelector","Footer","anchorEl","setAnchorEl","networks","networkLabels","Hidden","xsDown","smUp","Menu","anchorOrigin","vertical","horizontal","getContentAnchorEl","network","MenuItem","selected","addAccountOpen","setAddAccountOpen","addHardwareWalletDialogOpen","setAddHardwareWalletDialogOpen","deleteAccountOpen","setDeleteAccountOpen","setIsDeleteAccountEnabled","Divider","useFooterStyles","footer","DebugButtons","noSol","requestAirdropDisabled","requestAirdrop","WalletPage","Container","fixed","Grid","item","xs","RAYDIUM_STAKE_PROGRAM_ID","RAYDIUM_LP_PROGRAM_ID","marketCache","marketCacheConnection","decodeMessage","transactionMessage","Message","instructions","accountKeys","transactionInstruction","toInstruction","rawData","index","programIdIndex","decoded","getAccountByIndex","handleSystemInstruction","decodedInstruction","decodeTokenInstruction","handleTokenInstruction","some","decodeInstruction","handleDexInstruction","decodeStakeInstruction","handleRayStakeInstruction","decodeLpInstruction","handleRayLpInstruction","marketInfo","findIndex","accountKey","marketAddress","programIdAddress","strAddress","now","ts","Market","load","settleFundsData","getSettleFundsData","newOrderData","getNewOrderData","bufferData","decodeTokenInstructionData","systemInstruction","accountIndex","SystemInstruction","decodeInstructionType","decodeCreateAccount","decodeCreateWithSeed","decodeAllocate","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeTransfer","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceInitialize","decodeNonceAuthorize","initializeAccountData","getInitializeAccountData","transferData","getTransferData","closeAccountData","getCloseAccountData","openOrdersPubkey","NEW_ORDER_OPEN_ORDERS_INDEX","ownerPubkey","NEW_ORDER_OWNER_INDEX","basePubkey","SETTLE_FUNDS_BASE_WALLET_INDEX","quotePubkey","SETTLE_FUNDS_QUOTE_WALLET_INDEX","sourcePubkey","TRANSFER_SOURCE_INDEX","destinationPubkey","TRANSFER_DESTINATION_INDEX","TRANSFER_OWNER_INDEX","accountPubkey","INITIALIZE_ACCOUNT_ACCOUNT_INDEX","mintPubkey","INITIALIZE_ACCOUNT_MINT_INDEX","INITIALIZE_ACCOUNT_OWNER_INDEX","LabelValue","link","Neworder","onOpenAddress","side","limitPrice","maxQuantity","orderType","marketLabel","_decoded","ownAddress","fontWeight","charAt","priceLotsToNumber","baseSizeLotsToNumber","UnknownInstruction","wordBreak","TYPE_LABELS","systemCreate","systemTransfer","DATA_LABELS","noncePubkey","authorizedPubkey","newAuthorizedPubkey","entries","dataLabel","cancelOrder","newOrder","settleFunds","matchOrders","orderId","limit","DexInstruction","getAddressValue","isOwned","ownedKey","TokenInstruction","tokenMint","TOKEN_MINTS","isOwner","PopupPage","opener","origin","URLSearchParams","hash","postMessage","connectedAccount","setConnectedAccount","hasConnectedAccount","requests","setRequests","autoApprove","setAutoApprove","unloadHandler","addEventListener","removeEventListener","messageHandler","ApproveConnectionForm","onApprove","focusParent","sendSignature","messages","sendAllSignatures","signatures","ApproveSignatureForm","onReject","approveButton","actions","snackbarRoot","warningMessage","text","warningIcon","warningTitle","light","warningContainer","divider","dismissed","setDismissed","Card","CardContent","SnackbarContent","CardActions","isSafeInstruction","txInstructions","unsafe","states","CREATED","OWNED","CLOSED_TO_OWNED_DESTINATION","accountStates","ownedAccountPubkey","explorerUrlSuffix","parsing","setParsing","setTxInstructions","buttonRef","isMultiTx","validator","safe","focus","scrollIntoView","behavior","getContent","txIdx","ixs","Box","txListItem","App","prefersDarkMode","createMuiTheme","blue","self","top","fallback","ThemeProvider","CssBaseline","maxSnack","PageContents","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","customTokenNamesByNetwork","nameUpdated","setMaxListeners","visible","setVisible","dPath","derivedSeed","deriveSeed","sign","keyPair","fromSeed","path44","path44Change","detached"],"mappings":"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","file":"static/js/main.5813ddc3.chunk.js","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nconst bs58 = require('bs58');\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/*\n * Helper for chunked send of large payloads\n */\nasync function solana_send(transport, instruction, p1, payload) {\n  var p2 = 0;\n  var payload_offset = 0;\n\n  if (payload.length > MAX_PAYLOAD) {\n    while (payload.length - payload_offset > MAX_PAYLOAD) {\n      const buf = payload.slice(payload_offset, payload_offset + MAX_PAYLOAD);\n      payload_offset += MAX_PAYLOAD;\n      console.log(\n        'send',\n        (p2 | P2_MORE).toString(16),\n        buf.length.toString(16),\n        buf,\n      );\n      const reply = await transport.send(\n        LEDGER_CLA,\n        instruction,\n        p1,\n        p2 | P2_MORE,\n        buf,\n      );\n      if (reply.length !== 2) {\n        throw new Error(\n          'solana_send: Received unexpected reply payload',\n          'UnexpectedReplyPayload',\n        );\n      }\n      p2 |= P2_EXTEND;\n    }\n  }\n\n  const buf = payload.slice(payload_offset);\n  console.log('send', p2.toString(16), buf.length.toString(16), buf);\n  const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, buf);\n\n  return reply.slice(0, reply.length - 2);\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction _harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nexport function solana_derivation_path(account, change) {\n  const length = 4;\n  let useAccount = account ? account : 0;\n  let useChange = change ? change : 0;\n\n  var derivation_path = Buffer.alloc(1 + length * 4);\n  // eslint-disable-next-line\n  var offset = 0;\n  offset = derivation_path.writeUInt8(length, offset);\n  offset = derivation_path.writeUInt32BE(_harden(44), offset); // Using BIP44\n  offset = derivation_path.writeUInt32BE(_harden(501), offset); // Solana's BIP44 path\n  offset = derivation_path.writeUInt32BE(_harden(useAccount), offset);\n  derivation_path.writeUInt32BE(_harden(useChange), offset);\n\n  return derivation_path;\n}\n\nasync function solana_ledger_get_pubkey(transport, derivation_path) {\n  return solana_send(\n    transport,\n    INS_GET_PUBKEY,\n    P1_NON_CONFIRM,\n    derivation_path,\n  );\n}\n\nexport async function solana_ledger_sign_transaction(\n  transport,\n  derivation_path,\n  transaction,\n) {\n  const msg_bytes = transaction.serializeMessage();\n  return solana_ledger_sign_bytes(transport, derivation_path, msg_bytes);\n}\n\nexport async function solana_ledger_sign_bytes(\n  transport,\n  derivation_path,\n  msg_bytes,\n) {\n  var num_paths = Buffer.alloc(1);\n  num_paths.writeUInt8(1);\n\n  const payload = Buffer.concat([num_paths, derivation_path, msg_bytes]);\n\n  return solana_send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n}\n\nexport async function getPublicKey(transport, path) {\n  let from_derivation_path;\n  if (path) {\n    from_derivation_path = path;\n  } else {\n    from_derivation_path = solana_derivation_path();\n  }\n  const from_pubkey_bytes = await solana_ledger_get_pubkey(\n    transport,\n    from_derivation_path,\n  );\n  const from_pubkey_string = bs58.encode(from_pubkey_bytes);\n\n  return new PublicKey(from_pubkey_string);\n}\n","import TransportWebUsb from '@ledgerhq/hw-transport-webusb';\nimport {\n  getPublicKey,\n  solana_derivation_path,\n  solana_ledger_sign_bytes,\n  solana_ledger_sign_transaction,\n} from './ledger-core';\nimport bs58 from 'bs58';\n\nexport class LedgerWalletProvider {\n  constructor(args) {\n    this.onDisconnect = (args && args.onDisconnect) || (() => {});\n  }\n\n  init = async () => {\n    this.transport = await TransportWebUsb.create();\n    this.pubKey = await getPublicKey(this.transport);\n    this.transport.on('disconnect', this.onDisconnect);\n    this.listAddresses = async (walletCount) => {\n      // TODO: read accounts from ledger\n      return [this.pubKey];\n    };\n    return this;\n  };\n\n  get publicKey() {\n    return this.pubKey;\n  }\n\n  signTransaction = async (transaction) => {\n    const from_derivation_path = solana_derivation_path();\n    const sig_bytes = await solana_ledger_sign_transaction(\n      this.transport,\n      from_derivation_path,\n      transaction,\n    );\n    transaction.addSignature(this.publicKey, sig_bytes);\n    return transaction;\n  };\n\n  createSignature = async (message) => {\n    const from_derivation_path = solana_derivation_path();\n    const sig_bytes = await solana_ledger_sign_bytes(\n      this.transport,\n      from_derivation_path,\n      message,\n    );\n    return bs58.encode(sig_bytes);\n  };\n}\n","import React, { useRef } from 'react';\nimport { TextField } from '@material-ui/core';\nimport CopyIcon from 'mdi-material-ui/ContentCopy';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSnackbar } from 'notistack';\nimport QrcodeIcon from 'mdi-material-ui/Qrcode';\nimport QRCode from 'qrcode.react';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    alignItems: 'baseline',\n  },\n}));\n\nexport default function CopyableDisplay({\n  value,\n  label,\n  autoFocus,\n  qrCode,\n  helperText,\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const textareaRef = useRef();\n  const classes = useStyles();\n  const copyLink = () => {\n    let textArea = textareaRef.current;\n    if (textArea) {\n      textArea.select();\n      document.execCommand('copy');\n      enqueueSnackbar(`Copied ${label}`, {\n        variant: 'info',\n        autoHideDuration: 2500,\n      });\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        inputRef={(ref) => (textareaRef.current = ref)}\n        multiline\n        autoFocus={autoFocus}\n        value={value}\n        readOnly\n        onFocus={(e) => e.currentTarget.select()}\n        className={classes.textArea}\n        fullWidth\n        helperText={helperText}\n        label={label}\n        spellCheck={false}\n      />\n      <IconButton onClick={copyLink}>\n        <CopyIcon />\n      </IconButton>\n      {qrCode ? <Qrcode value={qrCode === true ? value : qrCode} /> : null}\n    </div>\n  );\n}\n\nconst useQrCodeStyles = makeStyles((theme) => ({\n  qrcodeContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction Qrcode({ value }) {\n  const [showQrcode, setShowQrcode] = React.useState(false);\n  const classes = useQrCodeStyles();\n\n  return (\n    <>\n      <IconButton onClick={() => setShowQrcode(true)}>\n        <QrcodeIcon />\n      </IconButton>\n      <Dialog open={showQrcode} onClose={() => setShowQrcode(false)}>\n        <DialogContent className={classes.qrcodeContainer}>\n          <QRCode value={value} size={256} includeMargin />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","import { Typography } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport React from 'react';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { abbreviateAddress } from '../utils/utils';\nimport CopyableDisplay from './CopyableDisplay';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  explorerLink: {\n    marginBottom: theme.spacing(2),\n  },\n  warning: {\n    marginBottom: theme.spacing(2),\n  },\n  container: {\n    minWidth: 600,\n  },\n}));\n\nexport default function TokenInfoDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n}) {\n  let { mint, tokenName, tokenSymbol } = balanceInfo;\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n\n  return (\n    <DialogForm open={open} onClose={onClose}>\n      <DialogTitle>\n        {tokenName ?? abbreviateAddress(mint)}\n        {tokenSymbol ? ` (${tokenSymbol})` : null}\n      </DialogTitle>\n      <DialogContent className={classes.container}>\n        <Typography className={classes.warning}>\n          Information about {tokenName ?? abbreviateAddress(mint)}\n        </Typography>\n        <Typography variant=\"body2\" className={classes.explorerLink}>\n          <Link\n            href={\n              `https://explorer.solana.com/account/${publicKey.toBase58()}` +\n              urlSuffix\n            }\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            View on Solana Explorer\n          </Link>\n        </Typography>\n        {!!mint && (\n          <CopyableDisplay\n            value={mint.toBase58()}\n            label={'Token Mint Address'}\n            autoFocus\n            helperText={\n              <>\n                This is <strong>not</strong> your deposit address\n              </>\n            }\n          />\n        )}\n        {!!tokenName && (\n          <CopyableDisplay value={tokenName} label={'Token Name'} />\n        )}\n        {!!tokenSymbol && (\n          <CopyableDisplay value={tokenSymbol} label={'Token Symbol'} />\n        )}\n      </DialogContent>\n    </DialogForm>\n  );\n}\n","export const showTokenInfoDialog = !!localStorage.getItem(\n  'showTokenInfoDialog',\n);\n\nexport const showSwapAddress = true;\n","import { useAsyncData } from '../fetch-loop';\n\nexport class SwapApiError extends Error {\n  constructor(msg, status) {\n    super(msg);\n    this.name = 'SwapApiError';\n    this.status = status;\n  }\n}\n\nexport async function swapApiRequest(\n  method,\n  path,\n  body,\n  { ignoreUserErrors = false } = {},\n) {\n  let headers = {};\n  let params = { headers, method };\n  if (method === 'GET') {\n    params.cache = 'no-cache';\n  } else if (body) {\n    headers['Content-Type'] = 'application/json';\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp, ignoreUserErrors);\n}\n\nasync function handleSwapApiResponse(resp, ignoreUserErrors) {\n  let json = await resp.json();\n  if (!json.success) {\n    if (ignoreUserErrors && resp.status >= 400 && resp.status < 500) {\n      return null;\n    }\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport function useSwapApiGet(path, options) {\n  return useAsyncData(\n    async () => {\n      if (!path) {\n        return null;\n      }\n      return await swapApiRequest('GET', path, undefined, {\n        ignoreUserErrors: true,\n      });\n    },\n    ['swapApiGet', path],\n    options,\n  );\n}\n","import { useConnectionConfig } from '../utils/connection';\nimport { TOKENS } from '../utils/tokens/names';\nimport React, { useState } from 'react';\n\nexport default function TokenIcon({ mint, url, tokenName, size = 20 }) {\n  const { endpoint } = useConnectionConfig();\n\n  const [hasError, setHasError] = useState(false);\n\n  if (!url) {\n    if (mint === null) {\n      url =\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png';\n    } else {\n      url = TOKENS?.[endpoint]?.find(\n        (token) => token.mintAddress === mint?.toBase58(),\n      )?.icon;\n    }\n  }\n\n  if (hasError || !url) {\n    return null;\n  }\n\n  return (\n    <img\n      src={url}\n      title={tokenName}\n      alt={tokenName}\n      style={{\n        width: size,\n        height: size,\n        backgroundColor: 'white',\n        borderRadius: size / 2,\n      }}\n      onError={() => setHasError(true)}\n    />\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  refreshWalletPublicKeys,\n  useWallet,\n  useWalletTokenAccounts,\n} from '../utils/wallet';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { TOKENS, useUpdateTokenName } from '../utils/tokens/names';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport LoadingIndicator from './LoadingIndicator';\nimport { makeStyles, Tab, Tabs } from '@material-ui/core';\nimport { useSendTransaction } from '../utils/notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport { abbreviateAddress } from '../utils/utils';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport {\n  useConnectionConfig,\n  useSolanaExplorerUrlSuffix,\n} from '../utils/connection';\nimport Link from '@material-ui/core/Link';\nimport CopyableDisplay from './CopyableDisplay';\nimport DialogForm from './DialogForm';\nimport { showSwapAddress } from '../utils/config';\nimport { swapApiRequest } from '../utils/swap/api';\nimport TokenIcon from './TokenIcon';\n\nconst feeFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 6,\n  maximumFractionDigits: 6,\n});\n\nconst useStyles = makeStyles((theme) => ({\n  tabs: {\n    marginBottom: theme.spacing(1),\n    borderBottom: `1px solid ${theme.palette.background.paper}`,\n  },\n}));\n\nexport default function AddTokenDialog({ open, onClose }) {\n  let wallet = useWallet();\n  let [tokenAccountCost] = useAsyncData(\n    wallet.tokenAccountCost,\n    wallet.tokenAccountCost,\n  );\n  let classes = useStyles();\n  let updateTokenName = useUpdateTokenName();\n  const [sendTransaction, sending] = useSendTransaction();\n  const { endpoint } = useConnectionConfig();\n  const popularTokens = TOKENS[endpoint];\n  const [walletAccounts] = useWalletTokenAccounts();\n\n  const [tab, setTab] = useState(!!popularTokens ? 'popular' : 'manual');\n  const [mintAddress, setMintAddress] = useState('');\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [erc20Address, setErc20Address] = useState('');\n\n  useEffect(() => {\n    if (!popularTokens) {\n      setTab('manual');\n    }\n  }, [popularTokens]);\n\n  function onSubmit(params) {\n    if (tab === 'manual') {\n      params = { mintAddress, tokenName, tokenSymbol };\n    } else if (tab === 'erc20') {\n      params = { erc20Address };\n    }\n    sendTransaction(addToken(params), {\n      onSuccess: () => {\n        refreshWalletPublicKeys(wallet);\n        onClose();\n      },\n    });\n  }\n\n  async function addToken({\n    mintAddress,\n    tokenName,\n    tokenSymbol,\n    erc20Address,\n  }) {\n    if (erc20Address) {\n      let tokenInfo = await swapApiRequest('POST', `coins/eth/${erc20Address}`);\n      mintAddress = tokenInfo.splMint;\n      tokenName = tokenInfo.name;\n      tokenSymbol = tokenInfo.ticker;\n      if (tokenInfo.blockchain !== 'sol') {\n        tokenName = 'Wrapped ' + tokenName;\n      }\n    }\n\n    let mint = new PublicKey(mintAddress);\n    updateTokenName(mint, tokenName, tokenSymbol);\n    const resp = await wallet.createAssociatedTokenAccount(mint);\n    return resp[1];\n  }\n\n  let valid = true;\n  if (tab === 'erc20') {\n    valid = erc20Address.length === 42 && erc20Address.startsWith('0x');\n  }\n\n  return (\n    <DialogForm open={open} onClose={onClose}>\n      <DialogTitle>Add Token</DialogTitle>\n      <DialogContent>\n        {tokenAccountCost ? (\n          <DialogContentText>\n            Add a token to your wallet. This will cost{' '}\n            {feeFormat.format(tokenAccountCost / LAMPORTS_PER_SOL)} SOL.\n          </DialogContentText>\n        ) : (\n          <LoadingIndicator />\n        )}\n        {!!popularTokens && (\n          <Tabs\n            value={tab}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n            className={classes.tabs}\n            onChange={(e, value) => setTab(value)}\n          >\n            <Tab label=\"Popular Tokens\" value=\"popular\" />\n            {showSwapAddress ? <Tab label=\"ERC20 Token\" value=\"erc20\" /> : null}\n            <Tab label=\"Manual Input\" value=\"manual\" />\n          </Tabs>\n        )}\n        {tab === 'manual' || !popularTokens ? (\n          <React.Fragment>\n            <TextField\n              label=\"Token Mint Address\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={mintAddress}\n              onChange={(e) => setMintAddress(e.target.value)}\n              autoFocus\n              disabled={sending}\n            />\n            <TextField\n              label=\"Token Name\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={tokenName}\n              onChange={(e) => setTokenName(e.target.value)}\n              disabled={sending}\n            />\n            <TextField\n              label=\"Token Symbol\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={tokenSymbol}\n              onChange={(e) => setTokenSymbol(e.target.value)}\n              disabled={sending}\n            />\n          </React.Fragment>\n        ) : tab === 'popular' ? (\n          <List disablePadding>\n            {popularTokens\n              .filter((token) => !token.deprecated)\n              .map((token) => (\n                <TokenListItem\n                  key={token.mintAddress}\n                  {...token}\n                  existingAccount={(walletAccounts || []).find(\n                    (account) =>\n                      account.parsed.mint.toBase58() === token.mintAddress,\n                  )}\n                  onSubmit={onSubmit}\n                  disalbed={sending}\n                />\n              ))}\n          </List>\n        ) : tab === 'erc20' ? (\n          <>\n            <TextField\n              label=\"ERC20 Contract Address\"\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={erc20Address}\n              onChange={(e) => setErc20Address(e.target.value.trim())}\n              autoFocus\n              disabled={sending}\n            />\n            {erc20Address && valid ? (\n              <Link\n                href={`https://etherscan.io/token/${erc20Address}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Etherscan\n              </Link>\n            ) : null}\n          </>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {tab !== 'popular' && (\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            disabled={sending || !valid}\n            onClick={() => onSubmit({ tokenName, tokenSymbol, mintAddress })}\n          >\n            Add\n          </Button>\n        )}\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\nfunction TokenListItem({\n  tokenName,\n  icon,\n  tokenSymbol,\n  mintAddress,\n  onSubmit,\n  disabled,\n  existingAccount,\n}) {\n  const [open, setOpen] = useState(false);\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const alreadyExists = !!existingAccount;\n  return (\n    <React.Fragment>\n      <div style={{ display: 'flex' }} key={tokenName}>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <TokenIcon url={icon} tokenName={tokenName} size={20} />\n          </ListItemIcon>\n          <ListItemText\n            primary={\n              <Link\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={\n                  `https://explorer.solana.com/account/${mintAddress}` +\n                  urlSuffix\n                }\n              >\n                {tokenName ?? abbreviateAddress(mintAddress)}\n                {tokenSymbol ? ` (${tokenSymbol})` : null}\n              </Link>\n            }\n          />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          disabled={disabled || alreadyExists}\n          onClick={() => onSubmit({ tokenName, tokenSymbol, mintAddress })}\n        >\n          {alreadyExists ? 'Added' : 'Add'}\n        </Button>\n      </div>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <CopyableDisplay\n          value={mintAddress}\n          label={`${tokenSymbol} Mint Address`}\n        />\n      </Collapse>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DialogForm from './DialogForm';\nimport { useWallet } from '../utils/wallet';\n\nexport default function ExportAccountDialog({ open, onClose }) {\n  const wallet = useWallet();\n  const [isHidden, setIsHidden] = useState(true);\n  const keyOutput = `[${Array.from(wallet.provider.account.secretKey)}]`;\n\n  return (\n    <DialogForm open={open} onClose={onClose} fullWidth>\n      <DialogTitle>Export account</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Private key\"\n          fullWidth\n          type={isHidden && 'password'}\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={keyOutput}\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={!isHidden}\n              onChange={() => setIsHidden(!isHidden)}\n            />\n          }\n          label=\"Reveal\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport ERC20_ABI from './erc20-abi.json';\nimport SWAP_ABI from './swap-abi.json';\nimport Button from '@material-ui/core/Button';\nimport { useCallAsync } from '../notifications';\n\nconst web3 = new Web3(window.ethereum);\n\nexport function useEthAccount() {\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    if (!window.ethereum) {\n      return;\n    }\n    const onChange = (accounts) =>\n      setAccount(accounts.length > 0 ? accounts[0] : null);\n    window.ethereum.request({ method: 'eth_accounts' }).then(onChange);\n    window.ethereum.on('accountsChanged', onChange);\n    return () => window.ethereum.removeListener('accountsChanged', onChange);\n  }, []);\n\n  return account;\n}\n\nexport async function getErc20Balance(account, erc20Address) {\n  if (!erc20Address) {\n    return parseInt(await web3.eth.getBalance(account)) / 1e18;\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const [value, decimals] = await Promise.all([\n    erc20.methods.balanceOf(account).call(),\n    erc20.methods.decimals().call(),\n  ]);\n  return parseInt(value, 10) / 10 ** parseInt(decimals, 10);\n}\n\nexport async function swapErc20ToSpl({\n  ethAccount,\n  erc20Address,\n  swapAddress,\n  destination,\n  amount, // string\n  onStatusChange,\n}) {\n  if (!erc20Address) {\n    return swapEthToSpl({\n      ethAccount,\n      swapAddress,\n      destination,\n      amount,\n      onStatusChange,\n    });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n\n  const encodedAmount = addDecimals(amount, decimals);\n\n  const approveTx = erc20.methods\n    .approve(swapAddress, encodedAmount)\n    .send({ from: ethAccount });\n  await waitForTxid(approveTx);\n\n  onStatusChange({ step: 1 });\n\n  const swapTx = swap.methods\n    .swapErc20(erc20Address, destination, encodedAmount)\n    .send({ from: ethAccount, gasLimit: 200000 });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([\n    approveTx,\n    swapTx,\n    waitForConfirms(swapTx, onStatusChange),\n  ]);\n\n  onStatusChange({ step: 3 });\n}\n\nexport async function swapEthToSpl({\n  ethAccount,\n  swapAddress,\n  destination,\n  amount,\n  onStatusChange,\n}) {\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n\n  const encodedAmount = addDecimals(amount, 18);\n  const swapTx = swap.methods\n    .swapEth(destination)\n    .send({ from: ethAccount, value: encodedAmount });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([swapTx, waitForConfirms(swapTx, onStatusChange)]);\n\n  onStatusChange({ step: 3 });\n}\n\nfunction addDecimals(str, decimals) {\n  if (!/^\\d*\\.?\\d*$/.test(str)) {\n    throw new Error('Invalid number');\n  }\n  if (!str.includes('.')) {\n    str += '.';\n  }\n  let [intStr, fractionStr] = str.split('.');\n  if (fractionStr.length > decimals) {\n    fractionStr = fractionStr.slice(0, decimals);\n  } else {\n    fractionStr += '0'.repeat(decimals - fractionStr.length);\n  }\n  return (intStr + fractionStr).replace(/^0+/, '') || '0';\n}\n\nconst pendingNonces = new Set();\n\nexport async function withdrawEth(from, withdrawal, callAsync) {\n  const { params, signature } = withdrawal.txData;\n  const swap = new web3.eth.Contract(SWAP_ABI, params[1]);\n  let method, nonce;\n  if (params[0] === 'withdrawErc20') {\n    method = swap.methods.withdrawErc20(\n      params[2],\n      params[3],\n      params[4],\n      params[5],\n      signature,\n    );\n    nonce = params[5];\n  } else if (params[0] === 'withdrawEth') {\n    method = swap.methods.withdrawEth(\n      params[2],\n      params[3],\n      params[4],\n      signature,\n    );\n    nonce = params[4];\n  } else {\n    return;\n  }\n  if (pendingNonces.has(nonce)) {\n    return;\n  }\n  try {\n    await method.estimateGas();\n  } catch (e) {\n    return;\n  }\n  pendingNonces.add(nonce);\n  await callAsync(method.send({ from, gasLimit: 200000 }), {\n    progressMessage: `Completing ${withdrawal.coin.ticker} transfer...`,\n  });\n  pendingNonces.delete(nonce);\n}\n\nfunction waitForTxid(tx) {\n  return new Promise((resolve, reject) => {\n    tx.once('transactionHash', resolve).catch(reject);\n  });\n}\n\nfunction waitForConfirms(tx, onStatusChange) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    tx.on('confirmation', (confirms, receipt) => {\n      if (!resolved) {\n        onStatusChange({ confirms: confirms + 1 });\n        if (!receipt.status) {\n          reject('Transaction failed');\n          resolved = true;\n        } else if (confirms >= 11) {\n          resolve();\n          resolved = true;\n        }\n      }\n    });\n  });\n}\n\nexport function ConnectToMetamaskButton() {\n  const callAsync = useCallAsync();\n\n  if (!window.ethereum) {\n    return (\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        component=\"a\"\n        href=\"https://metamask.io/\"\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        Connect to MetaMask\n      </Button>\n    );\n  }\n\n  function connect() {\n    callAsync(\n      window.ethereum.request({\n        method: 'eth_requestAccounts',\n      }),\n      {\n        progressMessage: 'Connecting to MetaMask...',\n        successMessage: 'Connected to MetaMask',\n      },\n    );\n  }\n\n  return (\n    <Button color=\"primary\" variant=\"outlined\" onClick={connect}>\n      Connect to MetaMask\n    </Button>\n  );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch } from \"@material-ui/core\";\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo }) {\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n  const onSubmitRef = useRef();\n\n  const [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/sol/${balanceInfo.mint.toBase58()}`\n      : null,\n  );\n  const ethAccount = useEthAccount();\n\n  const { mint, tokenName, tokenSymbol } = balanceInfo;\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => onSubmitRef.current()}\n        fullWidth\n      >\n        <DialogTitle>\n          Send {tokenName ?? abbreviateAddress(mint)}\n          {tokenSymbol ? ` (${tokenSymbol})` : null}\n        {ethAccount && (\n          <div>\n            <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n              Metamask connected: {ethAccount}\n            </Typography>\n          </div>\n        )}\n        </DialogTitle>\n        {swapCoinInfo ? (\n          <Tabs\n            value={tab}\n            variant=\"fullWidth\"\n            onChange={(e, value) => setTab(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n          >\n            {mint?.equals(WUSDC_MINT)\n              ? [\n                  <Tab label=\"SPL WUSDC\" key=\"spl\" value=\"spl\" />,\n                  <Tab\n                    label=\"SPL USDC\"\n                    key=\"wusdcToSplUsdc\"\n                    value=\"wusdcToSplUsdc\"\n                  />,\n                  <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n                ]\n              : [\n                  <Tab\n                    label={`SPL ${swapCoinInfo.ticker}`}\n                    key=\"spl\"\n                    value=\"spl\"\n                  />,\n                  <Tab\n                    label={`${\n                      swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'\n                    } ${swapCoinInfo.ticker}`}\n                    key=\"swap\"\n                    value=\"swap\"\n                  />,\n                ]}\n          </Tabs>\n        ) : null}\n        {tab === 'spl' ? (\n          <SendSplDialog\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            onSubmitRef={onSubmitRef}\n          />\n        ) : tab === 'wusdcToSplUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdcToSplUsdc\n          />\n        ) : (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            ethAccount={ethAccount}\n            onSubmitRef={onSubmitRef}\n          />\n        )}\n      </DialogForm>\n      {ethAccount &&\n      (swapCoinInfo?.blockchain === 'eth' || swapCoinInfo?.erc20Contract) ? (\n        <EthWithdrawalCompleter ethAccount={ethAccount} publicKey={publicKey} />\n      ) : null}\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, onSubmitRef }) {\n  const defaultAddressHelperText =\n    !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_SOL_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter SPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState();\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const { decimals, mint } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n\n  useEffect(() => {\n    (async () => {\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid SPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText('Destination is a Solana address');\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(destinationAddress),\n      amount,\n      balanceInfo.mint,\n      null,\n      overrideDestinationCheck\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: onClose });\n  }\n  onSubmitRef.current = onSubmit;\n  return (\n    <>\n      <DialogContent>{fields}</DialogContent>\n      <DialogActions>\n        { shouldShowOverride && (\n          <div style={{'align-items': 'center', 'display': 'flex', 'text-align': 'left'}}>\n            <b>This address has no funds. Are you sure it's correct?</b>\n            <Switch\n              checked={overrideDestinationCheck}\n              onChange={e => setOverrideDestinationCheck(e.target.checked)}\n              color=\"primary\"\n            />\n          </div>\n        )}\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          disabled={sending || !validAmount}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  onSubmitRef,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo);\n\n  const { tokenName, decimals, mint } = balanceInfo;\n  const blockchain = wusdcToSplUsdc\n    ? 'sol'\n    : swapCoinInfo.blockchain === 'sol'\n    ? 'eth'\n    : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    }\n  }, [setDestinationAddress, wusdcToSplUsdc, splUsdcWalletAddress]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'sol') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'sol') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      balanceInfo.mint,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: setSignature });\n  }\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n\n  return (\n    <>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <DialogContentText>\n          SPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'sol' && swapCoinInfo.splMint\n            ? 'SPL'\n            : 'native'}{' '}\n          {swapCoinInfo.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </DialogContentText>\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          disabled={sending || (needMetamask && !ethAccount) || !validAmount}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain }) {\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return (\n    <>\n      <DialogContent>\n        <Stepper activeStep={step}>\n          <Step>\n            <StepLabel>Send Request</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Wait for Confirmations</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Withdraw Funds</StepLabel>\n          </Step>\n        </Stepper>\n        {ethTxid ? (\n          <Typography variant=\"body2\" align=\"center\">\n            <Link\n              href={`https://etherscan.io/tx/${ethTxid}`}\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Etherscan\n            </Link>\n          </Typography>\n        ) : step < 3 ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            {confirms ? (\n              <Typography>{confirms} / 35 Confirmations</Typography>\n            ) : (\n              <Typography>Transaction Pending</Typography>\n            )}\n          </div>\n        ) : null}\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction useForm(balanceInfo, addressHelperText, passAddressValidation, overrideValidation) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, decimals, tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = (\n    <>\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        value={destinationAddress}\n        onChange={(e) => setDestinationAddress(e.target.value.trim())}\n        helperText={addressHelperText}\n        id={\n          !passAddressValidation && passAddressValidation !== undefined\n            ? 'outlined-error-helper-text'\n            : undefined\n        }\n        error={!passAddressValidation && passAddressValidation !== undefined}\n      />\n      <TextField\n        label=\"Amount\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        type=\"number\"\n        InputProps={{\n          endAdornment:  (\n            <InputAdornment position=\"end\">\n              <Button onClick={() =>\n                setTransferAmountString(\n                  balanceAmountToUserAmount(balanceAmount, decimals),\n                )\n              }>\n                MAX\n              </Button>\n              {tokenSymbol ? tokenSymbol : null}\n            </InputAdornment>\n          ),\n          inputProps: {\n            step: Math.pow(10, -decimals),\n          },\n        }}\n        value={transferAmountString}\n        onChange={(e) => setTransferAmountString(e.target.value.trim())}\n        helperText={\n          <span\n            onClick={() =>\n              setTransferAmountString(\n                balanceAmountToUserAmount(balanceAmount, decimals),\n              )\n            }\n          >\n            Max: {balanceAmountToUserAmount(balanceAmount, decimals)}\n          </span>\n        }\n      />\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals)\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/sol/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n","import React, { useState } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { abbreviateAddress } from '../utils/utils';\nimport CopyableDisplay from './CopyableDisplay';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { useCallAsync } from '../utils/notifications';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  swapErc20ToSpl,\n  useEthAccount,\n} from '../utils/swap/eth';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Link from '@material-ui/core/Link';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { DialogContentText } from '@material-ui/core';\n\nexport default function DepositDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapInfo,\n}) {\n  const ethAccount = useEthAccount();\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const { mint, tokenName, tokenSymbol, owner } = balanceInfo;\n  const [tab, setTab] = useState(0);\n\n  let tabs = null;\n  if (swapInfo) {\n    let firstTab = `SPL ${tokenSymbol ?? swapInfo.coin.ticker}`;\n    let secondTab = swapInfo.coin.ticker;\n    if (!mint) {\n      firstTab = 'SOL';\n    } else {\n      secondTab = `${\n        swapInfo.coin.erc20Contract ? 'ERC20' : 'Native'\n      } ${secondTab}`;\n    }\n    tabs = (\n      <Tabs\n        value={tab}\n        variant=\"fullWidth\"\n        onChange={(e, value) => setTab(value)}\n        textColor=\"primary\"\n        indicatorColor=\"primary\"\n      >\n        <Tab label={firstTab} />\n        <Tab label={secondTab} />\n      </Tabs>\n    );\n  }\n\n  return (\n    <DialogForm open={open} onClose={onClose}>\n      <DialogTitle>\n        Deposit {tokenName ?? mint.toBase58()}\n        {tokenSymbol ? ` (${tokenSymbol})` : null}\n        {ethAccount && (\n          <div>\n            <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n              Metamask connected: {ethAccount}\n            </Typography>\n          </div>\n        )}\n      </DialogTitle>\n      {tabs}\n      <DialogContent style={{ paddingTop: 16 }}>\n        {tab === 0 ? (\n          <>\n            {publicKey.equals(owner) ? (\n              <DialogContentText>\n                This address can only be used to receive SOL. Do not send other\n                tokens to this address.\n              </DialogContentText>\n            ) : (\n              <DialogContentText>\n                This address can only be used to receive{' '}\n                {tokenSymbol ?? abbreviateAddress(mint)}. Do not send SOL to\n                this address.\n              </DialogContentText>\n            )}\n            <CopyableDisplay\n              value={publicKey.toBase58()}\n              label={'Deposit Address'}\n              autoFocus\n              qrCode\n            />\n            <DialogContentText variant=\"body2\">\n              <Link\n                href={\n                  `https://explorer.solana.com/account/${publicKey.toBase58()}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Solana Explorer\n              </Link>\n            </DialogContentText>\n          </>\n        ) : (\n          <SolletSwapDepositAddress\n            balanceInfo={balanceInfo}\n            swapInfo={swapInfo}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\nfunction SolletSwapDepositAddress({ balanceInfo, swapInfo }) {\n  if (!swapInfo) {\n    return null;\n  }\n\n  const { blockchain, address, memo, coin } = swapInfo;\n  const { mint, tokenName } = balanceInfo;\n\n  if (blockchain === 'btc' && memo === null) {\n    return (\n      <>\n        <DialogContentText>\n          Native BTC can be converted to SPL {tokenName} by sending it to the\n          following address:\n        </DialogContentText>\n        <CopyableDisplay\n          value={address}\n          label=\"Native BTC Deposit Address\"\n          autoFocus\n          qrCode={`bitcoin:${address}`}\n        />\n      </>\n    );\n  }\n\n  if (blockchain === 'eth') {\n    return (\n      <>\n        <DialogContentText>\n          {coin.erc20Contract ? 'ERC20' : 'Native'} {coin.ticker} can be\n          converted to {mint ? 'SPL' : 'native'} {tokenName} via MetaMask. To\n          convert, you must already have SOL in your wallet.\n        </DialogContentText>\n        <MetamaskDeposit swapInfo={swapInfo} />\n      </>\n    );\n  }\n\n  return null;\n}\n\nfunction MetamaskDeposit({ swapInfo }) {\n  const ethAccount = useEthAccount();\n  const [amount, setAmount] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState(null);\n  const callAsync = useCallAsync();\n\n  const {\n    address: swapAddress,\n    memo: destination,\n    coin: { erc20Contract: erc20Address, ticker },\n  } = swapInfo;\n\n  const [maxAmount, maxAmountLoaded] = useAsyncData(async () => {\n    if (ethAccount) {\n      return Math.min(\n        await getErc20Balance(ethAccount, erc20Address),\n        swapInfo.maxSize ?? Infinity,\n      );\n    }\n    return 0;\n  }, tuple(getErc20Balance, ethAccount, erc20Address));\n\n  if (!ethAccount) {\n    return <ConnectToMetamaskButton />;\n  }\n\n  async function submit() {\n    setSubmitted(true);\n    setStatus({ step: 0 });\n    await callAsync(\n      (async () => {\n        let parsedAmount = parseFloat(amount);\n\n        if (!parsedAmount || parsedAmount > maxAmount || parsedAmount <= 0) {\n          throw new Error('Invalid amount');\n        }\n        await swapErc20ToSpl({\n          ethAccount,\n          erc20Address,\n          swapAddress,\n          destination,\n          amount,\n          onStatusChange: (e) => setStatus((status) => ({ ...status, ...e })),\n        });\n      })(),\n      { onError: () => setSubmitted(false) },\n    );\n  }\n\n  if (!submitted) {\n    return (\n      <div style={{ display: 'flex', alignItems: 'baseline' }}>\n        <TextField\n          label=\"Amount\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          type=\"number\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">{ticker}</InputAdornment>\n            ),\n            inputProps: {\n              step: 'any',\n            },\n          }}\n          value={amount}\n          onChange={(e) => setAmount(e.target.value.trim())}\n          helperText={\n            maxAmountLoaded ? (\n              <span onClick={() => setAmount(maxAmount.toFixed(6))}>\n                Max: {maxAmount.toFixed(6)}\n              </span>\n            ) : null\n          }\n        />\n        <Button color=\"primary\" style={{ marginLeft: 8 }} onClick={submit}>\n          Convert\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Stepper activeStep={status.step}>\n        <Step>\n          <StepLabel>Approve Conversion</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Send Funds</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Wait for Confirmations</StepLabel>\n        </Step>\n      </Stepper>\n      {status.step === 2 ? (\n        <>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            <div>\n              {status.confirms ? (\n                <Typography>{status.confirms} / 12 Confirmations</Typography>\n              ) : (\n                <Typography>Transaction Pending</Typography>\n              )}\n              <Typography variant=\"body2\">\n                <Link\n                  href={`https://etherscan.io/tx/${status.txid}`}\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Etherscan\n                </Link>\n              </Typography>\n            </div>\n          </div>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import DialogForm from './DialogForm';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { DialogContentText } from '@material-ui/core';\nimport { abbreviateAddress } from '../utils/utils';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport React from 'react';\nimport { useSendTransaction } from '../utils/notifications';\nimport { refreshWalletPublicKeys, useWallet } from '../utils/wallet';\n\nexport default function CloseTokenAccountDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const { mint, tokenName } = balanceInfo;\n\n  function onSubmit() {\n    sendTransaction(wallet.closeTokenAccount(publicKey), {\n      onSuccess: () => {\n        refreshWalletPublicKeys(wallet);\n        onClose();\n      },\n    });\n  }\n\n  return (\n    <DialogForm open={open} onClose={onClose} onSubmit={onSubmit}>\n      <DialogTitle>\n        Delete {tokenName ?? mint.toBase58()} Address{' '}\n        {abbreviateAddress(publicKey)}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Are you sure you want to delete your {tokenName ?? mint.toBase58()}{' '}\n          address {publicKey.toBase58()}? This will permanently disable token\n          transfers to this address and remove it from your wallet.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" color=\"secondary\" disabled={sending}>\n          Delete\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n","import React, { useState } from 'react';\nimport DialogForm from './DialogForm';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nexport default function EditAccountNameDialog({\n  open,\n  oldName,\n  onClose,\n  onEdit,\n}) {\n  const [name, setName] = useState(oldName);\n  return (\n    <DialogForm\n      open={open}\n      onEnter={() => setName(oldName)}\n      onClose={onClose}\n      onSubmit={() => onEdit(name.trim())}\n      fullWidth\n    >\n      <DialogTitle>Edit Account</DialogTitle>\n      <DialogContent>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <TextField\n            label=\"Name\"\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n        <Button type=\"submit\" color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n","import { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWalletPublicKeys } from '../utils/wallet';\nimport {\n  useConnection,\n  refreshAccountInfo,\n  getMultipleSolanaAccounts,\n} from '../utils/connection';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { refreshWalletPublicKeys, useWallet } from '../utils/wallet';\nimport {\n  createAssociatedTokenAccount,\n  findAssociatedTokenAddress,\n} from '../utils/tokens';\nimport { sleep } from '../utils/utils';\nimport { getTokenName } from '../utils/tokens/names';\n\nexport default function MergeAccountsDialog({ open, onClose }) {\n  const [publicKeys] = useWalletPublicKeys();\n  const connection = useConnection();\n  const wallet = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isMerging, setIsMerging] = useState(false);\n  const [mergeCheck, setMergeCheck] = useState('');\n\n  // Merging accounts is a destructive operation that, for each mint,\n  //\n  // * Creates an associated token account, if not already created\n  // * Moves all funds into the associated token account\n  // * Closes every account, excluding the associated token account.\n  //\n  // Although it's ok if this operation fails--since the user can just\n  // retry again--it's not a good experience; hence the retry logic.\n  // The retry count of 30 is arbitrary and probably overly conservative.\n  const mergeAccounts = async (retryCount = 30) => {\n    try {\n      if (retryCount === 0) {\n        enqueueSnackbar(`Unable to complete merge. Please try again.`, {\n          variant: 'error',\n        });\n        return;\n      }\n      // Fetch all token accounts owned by the wallet. An account is null\n      // if we previously sent the close transaction, but did not receive\n      // a response due to RPC node instability.\n      const tokenAccounts = (\n        await getMultipleSolanaAccounts(connection, publicKeys)\n      )\n        .filter(\n          (acc) =>\n            acc !== null &&\n            acc.account.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID),\n        )\n        .map(({ publicKey, account }) => {\n          return {\n            publicKey,\n            account: parseTokenAccountData(account.data),\n            owner: account.owner,\n          };\n        });\n\n      // Group the token accounts by mint.\n      const groupedTokenAccounts = {};\n      tokenAccounts.forEach((ta) => {\n        const key = ta.account.mint.toString();\n        if (groupedTokenAccounts[key]) {\n          groupedTokenAccounts[key].push(ta);\n        } else {\n          groupedTokenAccounts[key] = [ta];\n        }\n      });\n\n      // For each mint, merge them into one, associated token account.\n      const mints = Object.keys(groupedTokenAccounts);\n      for (let k = 0; k < mints.length; k += 1) {\n        const mintGroup = groupedTokenAccounts[mints[k]];\n        if (mintGroup.length > 0) {\n          const mint = mintGroup[0].account.mint;\n          const assocTokAddr = await findAssociatedTokenAddress(\n            wallet.publicKey,\n            mint,\n          );\n          // Don't merge if the only account is the associated token address.\n          if (\n            !(\n              mintGroup.length === 1 &&\n              assocTokAddr.equals(mintGroup[0].publicKey)\n            )\n          ) {\n            const name = getTokenName(mint, connection._rpcEndpoint);\n            const symbol = name.symbol ? name.symbol : mint.toString();\n            console.log(`Merging ${symbol}`);\n            enqueueSnackbar(`Merging ${symbol}`, {\n              variant: 'info',\n            });\n            await mergeMint(\n              assocTokAddr,\n              mintGroup,\n              wallet,\n              connection,\n              enqueueSnackbar,\n            );\n          }\n        }\n      }\n\n      // Wait to give the RPC nodes some time to catch up.\n      await sleep(5000);\n\n      // Refresh the UI to remove any duplicates.\n      await refresh(wallet, publicKeys);\n\n      // Exit dialogue.\n      close();\n    } catch (err) {\n      console.error('There was a problem merging accounts', err);\n      enqueueSnackbar('Could not confirm transaction. Please wait.', {\n        variant: 'info',\n      });\n\n      // Sleep to give the RPC nodes some time to catch up.\n      await sleep(10000);\n\n      enqueueSnackbar('Retrying merge', { variant: 'info' });\n      await mergeAccounts(retryCount - 1);\n    }\n  };\n  const close = () => {\n    setMergeCheck('');\n    onClose();\n  };\n  const disabled = mergeCheck.toLowerCase() !== 'merge';\n\n  return (\n    <Dialog disableBackdropClick={isMerging} open={open} onClose={onClose}>\n      {isMerging ? (\n        <DialogContent>\n          <DialogContentText style={{ marginBottom: 0, textAlign: 'center' }}>\n            Merging Accounts\n          </DialogContentText>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              padding: '24px',\n            }}\n          >\n            <CircularProgress />\n          </div>\n        </DialogContent>\n      ) : (\n        <>\n          <DialogTitle>Are you sure you want to merge accounts?</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <b>WARNING</b>: This action may break apps that depend on your\n              existing accounts.\n            </DialogContentText>\n            <DialogContentText>\n              Merging sends all tokens to{' '}\n              <Link\n                href={'https://spl.solana.com/associated-token-account'}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                associated token accounts\n              </Link>{' '}\n              <FingerprintIcon style={{ marginBottom: '-7px' }} />,{' '}\n              deduplicating and closing any accounts that share the same mint.\n              If associated token accounts do not exist, then they will be\n              created.\n            </DialogContentText>\n            <DialogContentText>\n              If merging fails during a period of high network load, you will\n              not have lost your funds. Just recontinue the merge from where you\n              left off. If you have a lot of accounts, merging might take a\n              while.\n            </DialogContentText>\n            <TextField\n              label={`Please type \"merge\" to confirm`}\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={mergeCheck}\n              onChange={(e) => setMergeCheck(e.target.value.trim())}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={close} color=\"primary\">\n              Cancel\n            </Button>\n            <Button\n              disabled={disabled}\n              onClick={() => {\n                setIsMerging(true);\n                mergeAccounts()\n                  .then(() => {\n                    enqueueSnackbar('Account merge complete', {\n                      variant: 'success',\n                    });\n                    setIsMerging(false);\n                  })\n                  .catch((err) => {\n                    enqueueSnackbar(\n                      `There was a problem merging your accounts: ${err.toString()}`,\n                      { variant: 'error' },\n                    );\n                    setIsMerging(false);\n                  });\n              }}\n              color=\"secondary\"\n              autoFocus\n            >\n              Merge\n            </Button>\n          </DialogActions>\n        </>\n      )}\n    </Dialog>\n  );\n}\n\n// Merges the given array of token accounts into one associated token account.\nasync function mergeMint(\n  assocTokAddr,\n  mintAccountSet,\n  wallet,\n  connection,\n  enqueueSnackbar,\n) {\n  if (mintAccountSet.length === 0) {\n    return;\n  }\n  // Get the associated token account.\n  let associatedTokenAccount = await (async () => {\n    let assocTok = mintAccountSet\n      .map((assocTok) => assocTok.publicKey)\n      .filter((tokAddr) => tokAddr.equals(assocTokAddr))\n      .pop();\n\n    // Do we already have the token account?\n    if (assocTok) {\n      return assocTok;\n    }\n\n    // Check if the associated token account has been created.\n    // This is required due to a sometimes unstable network, where\n    // the account is created, but the client doesn't receive a\n    // response confirmation.\n    const accInfo = await connection.getAccountInfo(assocTokAddr);\n    if (accInfo !== null) {\n      return assocTokAddr;\n    }\n\n    // If it doesn't exist, then make it.\n    const [address] = await createAssociatedTokenAccount({\n      connection,\n      wallet,\n      splTokenMintAddress: mintAccountSet[0].account.mint,\n    });\n\n    return address;\n  })();\n\n  // Send all funds to the associated token account for each account.\n  // Once the funds are transferred, close the duplicated account.\n  for (let k = 0; k < mintAccountSet.length; k += 1) {\n    const tokenAccount = mintAccountSet[k];\n    if (tokenAccount.publicKey.equals(associatedTokenAccount) === false) {\n      if (tokenAccount.account.amount > 0) {\n        await wallet.transferAndClose(\n          tokenAccount.publicKey,\n          associatedTokenAccount,\n          tokenAccount.account.amount,\n        );\n      } else {\n        await wallet.closeTokenAccount(tokenAccount.publicKey, true);\n      }\n    }\n  }\n}\n\nasync function refresh(wallet, publicKeys) {\n  await refreshWalletPublicKeys(wallet);\n  publicKeys.map((publicKey) =>\n    refreshAccountInfo(wallet.connection, publicKey, true),\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport { MARKETS } from '@project-serum/serum';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useSolanaExplorerUrlSuffix,\n} from '../utils/connection';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport { useConnection, MAINNET_URL } from '../utils/connection';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst serumMarkets = (() => {\n  const m = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split('/')[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split('/').join(''),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split('/').join(''),\n      };\n    }\n  });\n  return m;\n})();\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const { accounts, setAccountName } = useWalletSelector();\n  const selectedAccount = accounts.find((a) => a.isSelected);\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n            {selectedAccount && selectedAccount.name} Balances\n          </Typography>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton onClick={() => setShowEditAccountNameDialog(true)}>\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          <Tooltip title=\"Merge Accounts\" arrow>\n            <IconButton onClick={() => setShowMergeAccounts(true)}>\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton onClick={() => setShowAddTokenDialog(true)}>\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {publicKeys.map((publicKey) => (\n          <BalanceListItem key={publicKey.toBase58()} publicKey={publicKey} />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n    </Paper>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const [isAssociatedToken, setIsAssociatedToken] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo && balanceInfo.tokenSymbol) {\n      const coin = balanceInfo.tokenSymbol.toUpperCase();\n      // Don't fetch USD stable coins. Mark to 1 USD.\n      if (coin === 'USDT' || coin === 'USDC') {\n        setPrice(1);\n      }\n      // A Serum market exists. Fetch the price.\n      else if (serumMarkets[coin]) {\n        let m = serumMarkets[coin];\n        _priceStore.getPrice(connection, m.name).then((price) => {\n          setPrice(price);\n        });\n      }\n      // No Serum market exists.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { amount, decimals, mint, tokenName, tokenSymbol } = balanceInfo;\n\n  if (wallet && wallet.publicKey && mint) {\n    findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n      if (assocTok.equals(publicKey)) {\n        setIsAssociatedToken(true);\n      }\n    });\n  }\n\n  const subtitle = (\n    <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n      {isAssociatedToken && (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n            marginRight: '5px',\n          }}\n        >\n          <FingerprintIcon style={{ width: '20px' }} />\n        </div>\n      )}\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        {publicKey.toBase58()}\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\n        <ListItemIcon>\n          <TokenIcon mint={mint} tokenName={tokenName} size={28} />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {tokenName ?? abbreviateAddress(mint)}\n                {tokenSymbol ? ` (${tokenSymbol})` : null}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                ${((amount / Math.pow(10, decimals)) * price).toFixed(2)}\n              </Typography>\n            )}\n          </div>\n        </div>\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <BalanceListItemDetails\n          publicKey={publicKey}\n          serumMarkets={serumMarkets}\n          balanceInfo={balanceInfo}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({ publicKey, serumMarkets, balanceInfo }) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'sol',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native SOL coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'SOL' && tokenSymbol === 'SOL';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            Receive\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            Send\n          </Button>\n          {mint && amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        <Typography variant=\"body2\" className={classes.address}>\n          Deposit Address: {publicKey.toBase58()}\n        </Typography>\n        <Typography variant=\"body2\">\n          Token Name: {tokenName ?? 'Unknown'}\n        </Typography>\n        <Typography variant=\"body2\">\n          Token Symbol: {tokenSymbol ?? 'Unknown'}\n        </Typography>\n        {mint ? (\n          <Typography variant=\"body2\" className={classes.address}>\n            Token Address: {mint.toBase58()}\n          </Typography>\n        ) : null}\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <div>\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://explorer.solana.com/account/${publicKey.toBase58()}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Solana\n              </Link>\n            </Typography>\n            {market && (\n              <Typography variant=\"body2\">\n                <Link\n                  href={`https://dex.projectserum.com/#/market/${market}`}\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Serum\n                </Link>\n              </Typography>\n            )}\n            {swapInfo && swapInfo.coin.erc20Contract && (\n              <Typography variant=\"body2\">\n                <Link\n                  href={\n                    `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                    urlSuffix\n                  }\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Ethereum\n                </Link>\n              </Typography>\n            )}\n          </div>\n          {exportNeedsDisplay && wallet.allowsExport && (\n            <div>\n              <Typography variant=\"body2\">\n                <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                  Export\n                </Link>\n              </Typography>\n            </div>\n          )}\n        </div>\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  constructor() {\n    this.cache = {};\n  }\n\n  async getPrice(connection, marketName) {\n    return new Promise((resolve, reject) => {\n      if (connection._rpcEndpoint !== MAINNET_URL) {\n        resolve(undefined);\n        return;\n      }\n      if (this.cache[marketName] === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks.length === 0 && resp.data.bids.length === 0) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0]);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0]);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache[marketName] = mid;\n                resolve(this.cache[marketName]);\n              }\n            });\n          },\n        );\n      } else {\n        return resolve(this.cache[marketName]);\n      }\n    });\n  }\n}\n\nconst _priceStore = new PriceStore();\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport {\n  AccountInfo,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n} from '@solana/web3.js';\nimport tuple from 'immutable-tuple';\nimport { struct } from 'superstruct';\nimport assert from 'assert';\nimport { useLocalStorageState, useRefEqual } from './utils';\nimport { refreshCache, setCache, useAsyncData } from './fetch-loop';\n\nconst ConnectionContext = React.createContext<{\n  endpoint: string;\n  setEndpoint: (string) => void;\n  connection: Connection;\n} | null>(null);\n\nexport const MAINNET_URL = 'https://solana-api.projectserum.com';\nexport function ConnectionProvider({ children }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    'connectionEndpoint',\n    MAINNET_URL,\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n\n  return (\n    <ConnectionContext.Provider value={{ endpoint, setEndpoint, connection }}>\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection(): Connection {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.connection;\n}\n\nexport function useConnectionConfig() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return { endpoint: context.endpoint, setEndpoint: context.setEndpoint };\n}\n\nexport function useIsProdNetwork() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.endpoint === MAINNET_URL;\n}\n\nexport function useSolanaExplorerUrlSuffix() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  const endpoint = context.endpoint;\n  if (endpoint === clusterApiUrl('devnet')) {\n    return '?cluster=devnet';\n  } else if (endpoint === clusterApiUrl('testnet')) {\n    return '?cluster=testnet';\n  }\n  return '';\n}\n\nexport function useAccountInfo(publicKey?: PublicKey) {\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey?.toBase58());\n  const [accountInfo, loaded] = useAsyncData(\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\n    cacheKey,\n  );\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n    let previousInfo: AccountInfo<Buffer> | null = null;\n    const id = connection.onAccountChange(publicKey, (info) => {\n      if (\n        !previousInfo ||\n        !previousInfo.data.equals(info.data) ||\n        previousInfo.lamports !== info.lamports\n      ) {\n        previousInfo = info;\n        setCache(cacheKey, info);\n      }\n    });\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connection, publicKey?.toBase58() ?? '', cacheKey]);\n  return [\n    useRefEqual(\n      accountInfo,\n      (oldInfo, newInfo) =>\n        !!oldInfo &&\n        !!newInfo &&\n        oldInfo.data.equals(newInfo.data) &&\n        oldInfo.lamports === newInfo.lamports,\n    ),\n    loaded,\n  ];\n}\n\nexport function refreshAccountInfo(connection, publicKey, clearCache = false) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  refreshCache(cacheKey, clearCache);\n}\n\nexport function setInitialAccountInfo(connection, publicKey, accountInfo) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  setCache(cacheKey, accountInfo, { initializeOnly: true });\n}\n\nexport async function getMultipleSolanaAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n  const args = [publicKeys.map((k) => k.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  const res = GetMultipleAccountsAndContextRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n        publicKeys.map((k) => k.toBase58()).join(', ') +\n        ': ' +\n        res.error.message,\n    );\n  }\n  assert(typeof res.result !== 'undefined');\n  const accounts: Array<null | {\n    executable: any;\n    owner: PublicKey;\n    lamports: any;\n    data: Buffer;\n  }> = [];\n  for (const account of res.result.value) {\n    let value: {\n      executable: any;\n      owner: PublicKey;\n      lamports: any;\n      data: Buffer;\n    } | null = null;\n    if (res.result.value && account) {\n      const { executable, owner, lamports, data } = account;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n    accounts.push(value);\n  }\n  return accounts.map((account, idx) => {\n    return account === null\n      ? null\n      : {\n          publicKey: publicKeys[idx],\n          account,\n        };\n  });\n}\n\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\nexport const GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(\n  struct.array([struct.union(['null', AccountInfoResult])]),\n);\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport * as bs58 from 'bs58';\nimport { Account, PublicKey } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport {\n  setInitialAccountInfo,\n  useAccountInfo,\n  useConnection,\n} from './connection';\nimport {\n  closeTokenAccount,\n  createAndInitializeTokenAccount,\n  createAssociatedTokenAccount,\n  getOwnedTokenAccounts,\n  nativeTransfer,\n  transferTokens,\n  transferAndClose,\n} from './tokens';\nimport { TOKEN_PROGRAM_ID, WRAPPED_SOL_MINT } from './tokens/instructions';\nimport {\n  ACCOUNT_LAYOUT,\n  parseMintData,\n  parseTokenAccountData,\n} from './tokens/data';\nimport { useListener, useLocalStorageState, useRefEqual } from './utils';\nimport { useTokenName } from './tokens/names';\nimport { refreshCache, useAsyncData } from './fetch-loop';\nimport { getUnlockedMnemonicAndSeed, walletSeedChanged } from './wallet-seed';\nimport { WalletProviderFactory } from './walletProvider/factory';\nimport { getAccountFromSeed } from './walletProvider/localStorage';\nimport { useSnackbar } from 'notistack';\n\nconst DEFAULT_WALLET_SELECTOR = {\n  walletIndex: 0,\n  importedPubkey: undefined,\n  ledger: false,\n};\n\nexport class Wallet {\n  constructor(connection, type, args) {\n    this.connection = connection;\n    this.type = type;\n    this.provider = WalletProviderFactory.getProvider(type, args);\n  }\n\n  static create = async (connection, type, args) => {\n    const instance = new Wallet(connection, type, args);\n    await instance.provider.init();\n    return instance;\n  };\n\n  get publicKey() {\n    return this.provider.publicKey;\n  }\n\n  get allowsExport() {\n    return this.type === 'local';\n  }\n\n  getTokenAccountInfo = async () => {\n    let accounts = await getOwnedTokenAccounts(this.connection, this.publicKey);\n    return accounts\n      .map(({ publicKey, accountInfo }) => {\n        setInitialAccountInfo(this.connection, publicKey, accountInfo);\n        return { publicKey, parsed: parseTokenAccountData(accountInfo.data) };\n      })\n      .sort((account1, account2) =>\n        account1.parsed.mint\n          .toBase58()\n          .localeCompare(account2.parsed.mint.toBase58()),\n      );\n  };\n\n  createTokenAccount = async (tokenAddress) => {\n    return await createAndInitializeTokenAccount({\n      connection: this.connection,\n      payer: this,\n      mintPublicKey: tokenAddress,\n      newAccount: new Account(),\n    });\n  };\n\n  createAssociatedTokenAccount = async (splTokenMintAddress) => {\n    return await createAssociatedTokenAccount({\n      connection: this.connection,\n      wallet: this,\n      splTokenMintAddress,\n    });\n  };\n\n  tokenAccountCost = async () => {\n    return this.connection.getMinimumBalanceForRentExemption(\n      ACCOUNT_LAYOUT.span,\n    );\n  };\n\n  transferToken = async (\n    source,\n    destination,\n    amount,\n    mint,\n    memo = null,\n    overrideDestinationCheck = false,\n  ) => {\n    if (source.equals(this.publicKey)) {\n      if (memo) {\n        throw new Error('Memo not implemented');\n      }\n      return this.transferSol(destination, amount);\n    }\n    return await transferTokens({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: source,\n      destinationPublicKey: destination,\n      amount,\n      memo,\n      mint,\n      overrideDestinationCheck,\n    });\n  };\n\n  transferSol = async (destination, amount) => {\n    return nativeTransfer(this.connection, this, destination, amount);\n  };\n\n  closeTokenAccount = async (publicKey, skipPreflight = false) => {\n    return await closeTokenAccount({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: publicKey,\n      skipPreflight,\n    });\n  };\n\n  transferAndClose = async (source, destination, amount) => {\n    return await transferAndClose({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: source,\n      destinationPublicKey: destination,\n      amount,\n    });\n  };\n\n  signTransaction = async (transaction) => {\n    return this.provider.signTransaction(transaction);\n  };\n\n  createSignature = async (message) => {\n    return this.provider.createSignature(message);\n  };\n}\n\nconst WalletContext = React.createContext(null);\n\nexport function WalletProvider({ children }) {\n  useListener(walletSeedChanged, 'change');\n  const {\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  } = getUnlockedMnemonicAndSeed();\n  const { enqueueSnackbar } = useSnackbar();\n  const connection = useConnection();\n  const [wallet, setWallet] = useState();\n\n  // `privateKeyImports` are accounts imported *in addition* to HD wallets\n  const [privateKeyImports, setPrivateKeyImports] = useLocalStorageState(\n    'walletPrivateKeyImports',\n    {},\n  );\n  // `walletSelector` identifies which wallet to use.\n  const [walletSelector, setWalletSelector] = useLocalStorageState(\n    'walletSelector',\n    DEFAULT_WALLET_SELECTOR,\n  );\n  const [ledgerPubKey, setLedgerPubKey] = useState(\n    walletSelector.ledger ? walletSelector.importedPubkey : undefined,\n  );\n\n  // `walletCount` is the number of HD wallets.\n  const [walletCount, setWalletCount] = useLocalStorageState('walletCount', 1);\n\n  useEffect(() => {\n    (async () => {\n      if (!seed) {\n        return null;\n      }\n      let wallet;\n      if (walletSelector.ledger) {\n        try {\n          const onDisconnect = () => {\n            setWalletSelector(DEFAULT_WALLET_SELECTOR);\n            setLedgerPubKey(undefined);\n          };\n          wallet = await Wallet.create(connection, 'ledger', { onDisconnect });\n        } catch (e) {\n          console.log(`received error using ledger wallet: ${e}`);\n          let message = 'Received error unlocking ledger';\n          if (e.statusCode) {\n            message += `: ${e.statusCode}`;\n          }\n          enqueueSnackbar(message, { variant: 'error' });\n          setWalletSelector(DEFAULT_WALLET_SELECTOR);\n          setLedgerPubKey(undefined);\n          return;\n        }\n      }\n      if (!wallet) {\n        const account =\n          walletSelector.walletIndex !== undefined\n            ? getAccountFromSeed(\n                Buffer.from(seed, 'hex'),\n                walletSelector.walletIndex,\n                derivationPath,\n              )\n            : new Account(\n                (() => {\n                  const { nonce, ciphertext } = privateKeyImports[\n                    walletSelector.importedPubkey\n                  ];\n                  return nacl.secretbox.open(\n                    bs58.decode(ciphertext),\n                    bs58.decode(nonce),\n                    importsEncryptionKey,\n                  );\n                })(),\n              );\n        wallet = await Wallet.create(connection, 'local', { account });\n      }\n      setWallet(wallet);\n    })();\n  }, [\n    connection,\n    seed,\n    walletSelector,\n    privateKeyImports,\n    importsEncryptionKey,\n    setWalletSelector,\n    enqueueSnackbar,\n    derivationPath,\n  ]);\n\n  function addAccount({ name, importedAccount, ledger }) {\n    if (ledger) {\n      setLedgerPubKey(importedAccount);\n    } else if (importedAccount === undefined) {\n      name && localStorage.setItem(`name${walletCount}`, name);\n      setWalletCount(walletCount + 1);\n    } else {\n      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);\n      const plaintext = importedAccount.secretKey;\n      const ciphertext = nacl.secretbox(plaintext, nonce, importsEncryptionKey);\n      // `useLocalStorageState` requires a new object.\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[importedAccount.publicKey.toString()] = {\n        name,\n        ciphertext: bs58.encode(ciphertext),\n        nonce: bs58.encode(nonce),\n      };\n      setPrivateKeyImports(newPrivateKeyImports);\n    }\n  }\n\n  const getWalletNames = () => {\n    return JSON.stringify(\n      [...Array(walletCount).keys()].map((idx) =>\n        localStorage.getItem(`name${idx}`),\n      ),\n    );\n  };\n  const [walletNames, setWalletNames] = useState(getWalletNames());\n  function setAccountName(selector, newName) {\n    if (selector.importedPubkey && !selector.ledger) {\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[selector.importedPubkey.toString()].name = newName;\n      setPrivateKeyImports(newPrivateKeyImports);\n    } else {\n      localStorage.setItem(`name${selector.walletIndex}`, newName);\n      setWalletNames(getWalletNames());\n    }\n  }\n\n  const accounts = useMemo(() => {\n    if (!seed) {\n      return [];\n    }\n\n    const seedBuffer = Buffer.from(seed, 'hex');\n    const derivedAccounts = [...Array(walletCount).keys()].map((idx) => {\n      let address = getAccountFromSeed(seedBuffer, idx, derivationPath)\n        .publicKey;\n      let name = localStorage.getItem(`name${idx}`);\n      return {\n        selector: {\n          walletIndex: idx,\n          importedPubkey: undefined,\n          ledger: false,\n        },\n        isSelected: walletSelector.walletIndex === idx,\n        address,\n        name: idx === 0 ? 'Main account' : name || `Account ${idx}`,\n      };\n    });\n\n    const importedAccounts = Object.keys(privateKeyImports).map((pubkey) => {\n      const { name } = privateKeyImports[pubkey];\n      return {\n        selector: {\n          walletIndex: undefined,\n          importedPubkey: pubkey,\n          ledger: false,\n        },\n        address: new PublicKey(bs58.decode(pubkey)),\n        name: `${name} (imported)`, // TODO: do this in the Component with styling.\n        isSelected: walletSelector.importedPubkey === pubkey,\n      };\n    });\n\n    if (ledgerPubKey) {\n      derivedAccounts.push({\n        selector: {\n          walletIndex: undefined,\n          importedPubkey: ledgerPubKey,\n          ledger: true,\n        },\n        address: new PublicKey(ledgerPubKey), // todo: get the ledger address\n        name: 'Hardware wallet',\n        isSelected: walletSelector.ledger,\n      });\n    }\n\n    return derivedAccounts.concat(importedAccounts);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    seed,\n    walletCount,\n    walletSelector,\n    privateKeyImports,\n    walletNames,\n    ledgerPubKey,\n  ]);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        seed,\n        mnemonic,\n        importsEncryptionKey,\n        walletSelector,\n        setWalletSelector,\n        privateKeyImports,\n        setPrivateKeyImports,\n        accounts,\n        addAccount,\n        setAccountName,\n        derivationPath,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  return useContext(WalletContext).wallet;\n}\n\nexport function useWalletPublicKeys() {\n  let wallet = useWallet();\n  let [tokenAccountInfo, loaded] = useAsyncData(\n    wallet.getTokenAccountInfo,\n    wallet.getTokenAccountInfo,\n  );\n  let publicKeys = [\n    wallet.publicKey,\n    ...(tokenAccountInfo\n      ? tokenAccountInfo.map(({ publicKey }) => publicKey)\n      : []),\n  ];\n  // Prevent users from re-rendering unless the list of public keys actually changes\n  publicKeys = useRefEqual(\n    publicKeys,\n    (oldKeys, newKeys) =>\n      oldKeys.length === newKeys.length &&\n      oldKeys.every((key, i) => key.equals(newKeys[i])),\n  );\n  return [publicKeys, loaded];\n}\n\nexport function useWalletTokenAccounts() {\n  let wallet = useWallet();\n  return useAsyncData(wallet.getTokenAccountInfo, wallet.getTokenAccountInfo);\n}\n\nexport function refreshWalletPublicKeys(wallet) {\n  refreshCache(wallet.getTokenAccountInfo);\n}\n\nexport function useWalletAddressForMint(mint) {\n  const [walletAccounts] = useWalletTokenAccounts();\n  return useMemo(\n    () =>\n      mint\n        ? walletAccounts\n            ?.find((account) => account.parsed?.mint?.equals(mint))\n            ?.publicKey.toBase58()\n        : null,\n    [walletAccounts, mint],\n  );\n}\n\nexport function useBalanceInfo(publicKey) {\n  let [accountInfo, accountInfoLoaded] = useAccountInfo(publicKey);\n  let { mint, owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n    ? parseTokenAccountData(accountInfo.data)\n    : {};\n  let [mintInfo, mintInfoLoaded] = useAccountInfo(mint);\n  let { name, symbol } = useTokenName(mint);\n\n  if (!accountInfoLoaded) {\n    return null;\n  }\n\n  if (mint && mint.equals(WRAPPED_SOL_MINT)) {\n    return {\n      amount,\n      decimals: 9,\n      mint,\n      owner,\n      tokenName: 'Wrapped SOL',\n      tokenSymbol: 'SOL',\n      valid: true,\n    };\n  }\n\n  if (mint && mintInfoLoaded) {\n    try {\n      let { decimals } = parseMintData(mintInfo.data);\n      return {\n        amount,\n        decimals,\n        mint,\n        owner,\n        tokenName: name,\n        tokenSymbol: symbol,\n        valid: true,\n      };\n    } catch (e) {\n      return {\n        amount,\n        decimals: 0,\n        mint,\n        owner,\n        tokenName: 'Invalid',\n        tokenSymbol: 'INVALID',\n        valid: false,\n      };\n    }\n  }\n\n  if (!mint) {\n    return {\n      amount: accountInfo?.lamports ?? 0,\n      decimals: 9,\n      mint: null,\n      owner: publicKey,\n      tokenName: 'SOL',\n      tokenSymbol: 'SOL',\n      valid: true,\n    };\n  }\n\n  return null;\n}\n\nexport function useWalletSelector() {\n  const {\n    accounts,\n    addAccount,\n    setWalletSelector,\n    setAccountName,\n  } = useContext(WalletContext);\n\n  return { accounts, setWalletSelector, addAccount, setAccountName };\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function useLocalStorageState<T>(\n  key: string,\n  defaultState: T,\n): [T, (T) => void] {\n  const [state, setState] = useState(() => {\n    let storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      let changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport function useEffectAfterTimeout(effect: () => void, timeout: number) {\n  useEffect(() => {\n    let handle = setTimeout(effect, timeout);\n    return () => clearTimeout(handle);\n  });\n}\n\nexport function useListener(emitter, eventName: string) {\n  let [, forceUpdate] = useState(0);\n  useEffect(() => {\n    let listener = () => forceUpdate((i) => i + 1);\n    emitter.on(eventName, listener);\n    return () => emitter.removeListener(eventName, listener);\n  }, [emitter, eventName]);\n}\n\nexport function useRefEqual<T>(\n  value: T,\n  areEqual: (oldValue: T, newValue: T) => boolean,\n): T {\n  const prevRef = useRef<T>(value);\n  if (prevRef.current !== value && !areEqual(prevRef.current, value)) {\n    prevRef.current = value;\n  }\n  return prevRef.current;\n}\n\nexport function abbreviateAddress(address: PublicKey) {\n  let base58 = address.toBase58();\n  return base58.slice(0, 4) + '…' + base58.slice(base58.length - 4);\n}\n\nexport async function confirmTransaction(\n  connection: Connection,\n  signature: string,\n) {\n  let startTime = new Date();\n  let result = await connection.confirmTransaction(signature, 'recent');\n  if (result.value.err) {\n    throw new Error(\n      'Error confirming transaction: ' + JSON.stringify(result.value.err),\n    );\n  }\n  console.log(\n    'Transaction confirmed after %sms',\n    new Date().getTime() - startTime.getTime(),\n  );\n  return result.value;\n}\n","import { LocalStorageWalletProvider } from './localStorage';\nimport { LedgerWalletProvider } from './ledger';\n\nexport class WalletProviderFactory {\n  static getProvider(type, args) {\n    if (type === 'local') {\n      return new LocalStorageWalletProvider(args);\n    }\n\n    if (type === 'ledger') {\n      return new LedgerWalletProvider(args);\n    }\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  generateMnemonicAndSeed,\n  hasLockedMnemonicAndSeed,\n  loadMnemonicAndSeed,\n  mnemonicToSeed,\n  storeMnemonicAndSeed,\n} from '../utils/wallet-seed';\nimport {\n  getAccountFromSeed,\n  DERIVATION_PATH,\n} from '../utils/walletProvider/localStorage.js';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport Container from '@material-ui/core/Container';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport { BalanceListItem } from '../components/BalancesList.js';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useCallAsync } from '../utils/notifications';\nimport Link from '@material-ui/core/Link';\nimport { validateMnemonic } from 'bip39';\n\nexport default function LoginPage() {\n  const [restore, setRestore] = useState(false);\n  return (\n    <Container maxWidth=\"sm\">\n      {restore ? (\n        <RestoreWalletForm goBack={() => setRestore(false)} />\n      ) : (\n        <>\n          {hasLockedMnemonicAndSeed() ? <LoginForm /> : <CreateWalletForm />}\n          <br />\n          <Link style={{ cursor: 'pointer' }} onClick={() => setRestore(true)}>\n            Restore existing wallet\n          </Link>\n        </>\n      )}\n    </Container>\n  );\n}\n\nfunction CreateWalletForm() {\n  const [mnemonicAndSeed, setMnemonicAndSeed] = useState(null);\n  useEffect(() => {\n    generateMnemonicAndSeed().then(setMnemonicAndSeed);\n  }, []);\n  const [savedWords, setSavedWords] = useState(false);\n  const callAsync = useCallAsync();\n\n  function submit(password) {\n    const { mnemonic, seed } = mnemonicAndSeed;\n    callAsync(\n      storeMnemonicAndSeed(\n        mnemonic,\n        seed,\n        password,\n        DERIVATION_PATH.bip44Change,\n      ),\n      {\n        progressMessage: 'Creating wallet...',\n        successMessage: 'Wallet created',\n      },\n    );\n  }\n\n  if (!savedWords) {\n    return (\n      <SeedWordsForm\n        mnemonicAndSeed={mnemonicAndSeed}\n        goForward={() => setSavedWords(true)}\n      />\n    );\n  }\n\n  return (\n    <ChoosePasswordForm\n      mnemonicAndSeed={mnemonicAndSeed}\n      goBack={() => setSavedWords(false)}\n      onSubmit={submit}\n    />\n  );\n}\n\nfunction SeedWordsForm({ mnemonicAndSeed, goForward }) {\n  const [confirmed, setConfirmed] = useState(false);\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          Create New Wallet\n        </Typography>\n        <Typography paragraph>\n          Create a new wallet to hold Solana and SPL tokens.\n        </Typography>\n        <Typography>\n          Please write down the following twenty four words and keep them in a\n          safe place:\n        </Typography>\n        {mnemonicAndSeed ? (\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            margin=\"normal\"\n            value={mnemonicAndSeed.mnemonic}\n            label=\"Seed Words\"\n            onFocus={(e) => e.currentTarget.select()}\n          />\n        ) : (\n          <LoadingIndicator />\n        )}\n        <Typography paragraph>\n          Your private keys are only stored on your current computer or device.\n          You will need these words to restore your wallet if your browser's\n          storage is cleared or your device is damaged or lost.\n        </Typography>\n        <Typography paragraph>\n          By default, sollet will use <code>m/44'/501'/0'/0'</code> as the\n          derivation path for the main wallet. To use an alternative path, try\n          restoring an existing wallet.\n        </Typography>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={confirmed}\n              disabled={!mnemonicAndSeed}\n              onChange={(e) => setConfirmed(e.target.checked)}\n            />\n          }\n          label=\"I have saved these words in a safe place.\"\n        />\n      </CardContent>\n      <CardActions style={{ justifyContent: 'flex-end' }}>\n        <Button color=\"primary\" disabled={!confirmed} onClick={goForward}>\n          Continue\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nfunction ChoosePasswordForm({ goBack, onSubmit }) {\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          Choose a Password (Optional)\n        </Typography>\n        <Typography>\n          Optionally pick a password to protect your wallet.\n        </Typography>\n        <TextField\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          label=\"New Password\"\n          type=\"password\"\n          autoComplete=\"new-password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <TextField\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          label=\"Confirm Password\"\n          type=\"password\"\n          autoComplete=\"new-password\"\n          value={passwordConfirm}\n          onChange={(e) => setPasswordConfirm(e.target.value)}\n        />\n        <Typography>\n          If you forget your password you will need to restore your wallet using\n          your seed words.\n        </Typography>\n      </CardContent>\n      <CardActions style={{ justifyContent: 'space-between' }}>\n        <Button onClick={goBack}>Back</Button>\n        <Button\n          color=\"primary\"\n          disabled={password !== passwordConfirm}\n          onClick={() => onSubmit(password)}\n        >\n          Create Wallet\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nfunction LoginForm() {\n  const [password, setPassword] = useState('');\n  const [stayLoggedIn, setStayLoggedIn] = useState(false);\n  const callAsync = useCallAsync();\n\n  function submit() {\n    callAsync(loadMnemonicAndSeed(password, stayLoggedIn), {\n      progressMessage: 'Unlocking wallet...',\n      successMessage: 'Wallet unlocked',\n    });\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          Unlock Wallet\n        </Typography>\n        <TextField\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={stayLoggedIn}\n              onChange={(e) => setStayLoggedIn(e.target.checked)}\n            />\n          }\n          label=\"Keep wallet unlocked\"\n        />\n      </CardContent>\n      <CardActions style={{ justifyContent: 'flex-end' }}>\n        <Button color=\"primary\" onClick={submit}>\n          Unlock\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nfunction RestoreWalletForm({ goBack }) {\n  const [mnemonic, setMnemonic] = useState('');\n  const [seed, setSeed] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n  const [next, setNext] = useState(false);\n  const isNextBtnEnabled =\n    password === passwordConfirm && validateMnemonic(mnemonic);\n\n  return (\n    <>\n      {next ? (\n        <DerivedAccounts\n          goBack={() => setNext(false)}\n          mnemonic={mnemonic}\n          password={password}\n          seed={seed}\n        />\n      ) : (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\" gutterBottom>\n              Restore Existing Wallet\n            </Typography>\n            <Typography>\n              Restore your wallet using your twelve or twenty-four seed words. Note that this\n              will delete any existing wallet on this device.\n            </Typography>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              multiline\n              rows={3}\n              margin=\"normal\"\n              label=\"Seed Words\"\n              value={mnemonic}\n              onChange={(e) => setMnemonic(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              label=\"New Password (Optional)\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              label=\"Confirm Password\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              value={passwordConfirm}\n              onChange={(e) => setPasswordConfirm(e.target.value)}\n            />\n          </CardContent>\n          <CardActions style={{ justifyContent: 'space-between' }}>\n            <Button onClick={goBack}>Cancel</Button>\n            <Button\n              color=\"primary\"\n              disabled={!isNextBtnEnabled}\n              onClick={() => {\n                mnemonicToSeed(mnemonic).then((seed) => {\n                  setSeed(seed);\n                  setNext(true);\n                });\n              }}\n            >\n              Next\n            </Button>\n          </CardActions>\n        </Card>\n      )}\n    </>\n  );\n}\n\nfunction DerivedAccounts({ goBack, mnemonic, seed, password }) {\n  const callAsync = useCallAsync();\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const [dPathMenuItem, setDPathMenuItem] = useState(\n    DerivationPathMenuItem.Bip44Change,\n  );\n\n  const accounts = [...Array(10)].map((_, idx) => {\n    return getAccountFromSeed(\n      Buffer.from(seed, 'hex'),\n      idx,\n      toDerivationPath(dPathMenuItem),\n    );\n  });\n\n  function submit() {\n    callAsync(\n      storeMnemonicAndSeed(\n        mnemonic,\n        seed,\n        password,\n        toDerivationPath(dPathMenuItem),\n      ),\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Typography variant=\"h5\" gutterBottom>\n            Derivable Accounts\n          </Typography>\n          <FormControl variant=\"outlined\">\n            <Select\n              value={dPathMenuItem}\n              onChange={(e) => setDPathMenuItem(e.target.value)}\n            >\n              <MenuItem value={DerivationPathMenuItem.Bip44Change}>\n                {`m/44'/501'/0'/0'`}\n              </MenuItem>\n              <MenuItem value={DerivationPathMenuItem.Bip44}>\n                {`m/44'/501'/0'`}\n              </MenuItem>\n              <MenuItem value={DerivationPathMenuItem.Deprecated}>\n                {`m/501'/0'/0/0 (deprecated)`}\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        {accounts.map((acc) => {\n          return (\n            <Link\n              href={\n                `https://explorer.solana.com/account/${acc.publicKey.toBase58()}` +\n                urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              <BalanceListItem\n                publicKey={acc.publicKey}\n                walletAccount={acc}\n                expandable={false}\n              />\n            </Link>\n          );\n        })}\n      </CardContent>\n      <CardActions style={{ justifyContent: 'space-between' }}>\n        <Button onClick={goBack}>Back</Button>\n        <Button color=\"primary\" onClick={submit}>\n          Restore\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\n// Material UI's Select doesn't render properly when using an `undefined` value,\n// so we define this type and the subsequent `toDerivationPath` translator as a\n// workaround.\n//\n// DERIVATION_PATH.deprecated is always undefined.\nconst DerivationPathMenuItem = {\n  Deprecated: 0,\n  Bip44: 1,\n  Bip44Change: 2,\n};\n\nfunction toDerivationPath(dPathMenuItem) {\n  switch (dPathMenuItem) {\n    case DerivationPathMenuItem.Deprecated:\n      return DERIVATION_PATH.deprecated;\n    case DerivationPathMenuItem.Bip44:\n      return DERIVATION_PATH.bip44;\n    case DerivationPathMenuItem.Bip44Change:\n      return DERIVATION_PATH.bip44Change;\n    default:\n      throw new Error(`invalid derivation path: ${dPathMenuItem}`);\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\nimport {\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { publicKeyLayout } from '@project-serum/serum/lib/layout';\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n\nexport const MEMO_PROGRAM_ID = new PublicKey(\n  'Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo',\n);\n\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(\n  0,\n  BufferLayout.struct([\n    BufferLayout.u8('decimals'),\n    BufferLayout.blob(32, 'mintAuthority'),\n    BufferLayout.u8('freezeAuthorityOption'),\n    BufferLayout.blob(32, 'freezeAuthority'),\n  ]),\n  'initializeMint',\n);\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(\n  3,\n  BufferLayout.struct([BufferLayout.nu64('amount')]),\n  'transfer',\n);\nLAYOUT.addVariant(\n  7,\n  BufferLayout.struct([BufferLayout.nu64('amount')]),\n  'mintTo',\n);\nLAYOUT.addVariant(\n  8,\n  BufferLayout.struct([BufferLayout.nu64('amount')]),\n  'burn',\n);\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\n\nconst instructionMaxSpan = Math.max(\n  ...Object.values(LAYOUT.registry).map((r) => r.span),\n);\n\nfunction encodeTokenInstructionData(instruction) {\n  let b = Buffer.alloc(instructionMaxSpan);\n  let span = LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function initializeMint({\n  mint,\n  decimals,\n  mintAuthority,\n  freezeAuthority,\n}) {\n  let keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeMint: {\n        decimals,\n        mintAuthority: mintAuthority.toBuffer(),\n        freezeAuthorityOption: !!freezeAuthority,\n        freezeAuthority: (freezeAuthority || new PublicKey()).toBuffer(),\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function initializeAccount({ account, mint, owner }) {\n  let keys = [\n    { pubkey: account, isSigner: false, isWritable: true },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function transfer({ source, destination, amount, owner }) {\n  let keys = [\n    { pubkey: source, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      transfer: { amount },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function mintTo({ mint, destination, amount, mintAuthority }) {\n  let keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: mintAuthority, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      mintTo: {\n        amount,\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function closeAccount({ source, destination, owner }) {\n  const keys = [\n    { pubkey: source, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      closeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function memoInstruction(memo) {\n  return new TransactionInstruction({\n    keys: [],\n    data: Buffer.from(memo, 'utf-8'),\n    programId: MEMO_PROGRAM_ID,\n  });\n}\n\nexport const OWNER_VALIDATION_PROGRAM_ID = new PublicKey(\n  '4MNPdKu9wFMvEeZBMt3Eipfs5ovVWTJb31pEXDJAAxX5',\n);\n\nexport const OWNER_VALIDATION_LAYOUT = BufferLayout.struct([\n  publicKeyLayout('account'),\n]);\n\nexport function encodeOwnerValidationInstruction(instruction) {\n  const b = Buffer.alloc(OWNER_VALIDATION_LAYOUT.span);\n  const span = OWNER_VALIDATION_LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function assertOwner({ account, owner }) {\n  const keys = [{ pubkey: account, isSigner: false, isWritable: false }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeOwnerValidationInstruction({ account: owner }),\n    programId: OWNER_VALIDATION_PROGRAM_ID,\n  });\n}\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function DialogForm({\n  open,\n  onClose,\n  onSubmit,\n  children,\n  ...rest\n}) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n\n  return (\n    <Dialog\n      open={open}\n      PaperProps={{\n        component: 'form',\n        onSubmit: (e) => {\n          e.preventDefault();\n          if (onSubmit) {\n            onSubmit();\n          }\n        },\n      }}\n      onClose={onClose}\n      fullScreen={fullScreen}\n      {...rest}\n    >\n      {children}\n    </Dialog>\n  );\n}\n","import * as BufferLayout from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8('decimals'),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data) {\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n\nexport function parseMintData(data) {\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nexport function getOwnedAccountsFilters(publicKey) {\n  return [\n    {\n      memcmp: {\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import assert from 'assert';\nimport { useEffect, useReducer } from 'react';\nimport tuple from 'immutable-tuple';\n\nconst pageLoadTime = new Date();\n\nconst globalCache: Map<any, any> = new Map();\n\nclass FetchLoops {\n  loops = new Map();\n\n  addListener(listener) {\n    if (!this.loops.has(listener.cacheKey)) {\n      this.loops.set(\n        listener.cacheKey,\n        new FetchLoopInternal(listener.cacheKey, listener.fn),\n      );\n    }\n    this.loops.get(listener.cacheKey).addListener(listener);\n  }\n\n  removeListener(listener) {\n    let loop = this.loops.get(listener.cacheKey);\n    loop.removeListener(listener);\n    if (loop.stopped) {\n      this.loops.delete(listener.cacheKey);\n    }\n  }\n\n  refresh(cacheKey) {\n    if (this.loops.has(cacheKey)) {\n      this.loops.get(cacheKey).refresh();\n    }\n  }\n\n  refreshAll() {\n    return Promise.all([...this.loops.values()].map((loop) => loop.refresh()));\n  }\n}\nconst globalLoops = new FetchLoops();\n\nclass FetchLoopListener<T = any> {\n  cacheKey: any;\n  fn: () => Promise<T>;\n  refreshInterval: number;\n  callback: () => void;\n\n  constructor(\n    cacheKey: any,\n    fn: () => Promise<T>,\n    refreshInterval: number,\n    callback: () => void,\n  ) {\n    this.cacheKey = cacheKey;\n    this.fn = fn;\n    this.refreshInterval = refreshInterval;\n    this.callback = callback;\n  }\n}\n\nclass FetchLoopInternal<T = any> {\n  cacheKey: any;\n  fn: () => Promise<T>;\n  timeoutId: null | any;\n  listeners: Set<FetchLoopListener<T>>;\n  errors: number;\n\n  constructor(cacheKey: any, fn: () => Promise<T>) {\n    this.cacheKey = cacheKey;\n    this.fn = fn;\n    this.timeoutId = null;\n    this.listeners = new Set();\n    this.errors = 0;\n  }\n\n  get refreshInterval(): number {\n    return Math.min(\n      ...[...this.listeners].map((listener) => listener.refreshInterval),\n    );\n  }\n\n  get stopped(): boolean {\n    return this.listeners.size === 0;\n  }\n\n  addListener(listener: FetchLoopListener<T>): void {\n    const previousRefreshInterval = this.refreshInterval;\n    this.listeners.add(listener);\n    if (this.refreshInterval < previousRefreshInterval) {\n      this.refresh();\n    }\n  }\n\n  removeListener(listener: FetchLoopListener<T>): void {\n    assert(this.listeners.delete(listener));\n    if (this.stopped) {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n  }\n\n  notifyListeners(): void {\n    this.listeners.forEach((listener) => listener.callback());\n  }\n\n  refresh = async () => {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    try {\n      const data = await this.fn();\n      globalCache.set(this.cacheKey, data);\n      this.errors = 0;\n      this.notifyListeners();\n      return data;\n    } catch (error) {\n      ++this.errors;\n      console.warn(error);\n    } finally {\n      if (!this.timeoutId && !this.stopped) {\n        let waitTime = this.refreshInterval;\n\n        // Back off on errors.\n        if (this.errors > 0) {\n          waitTime = Math.min(1000 * 2 ** (this.errors - 1), 60000);\n        }\n\n        // Don't do any refreshing for the first five seconds, to make way for other things to load.\n        const timeSincePageLoad = +new Date() - +pageLoadTime;\n        if (timeSincePageLoad < 5000) {\n          waitTime += 5000 - timeSincePageLoad / 2;\n        }\n\n        // Refresh background pages slowly.\n        if (document.visibilityState === 'hidden') {\n          waitTime = 60000;\n        } else if (!document.hasFocus()) {\n          waitTime *= 1.5;\n        }\n\n        // Add jitter so we don't send all requests at the same time.\n        waitTime *= 0.8 + 0.4 * Math.random();\n\n        this.timeoutId = setTimeout(this.refresh, waitTime);\n      }\n    }\n  };\n}\n\nexport function useAsyncData<T = any>(\n  asyncFn: () => Promise<T>,\n  cacheKey: any,\n  { refreshInterval = 60000 } = {},\n): [null | undefined | T, boolean] {\n  const [, rerender] = useReducer((i) => i + 1, 0);\n  cacheKey = formatCacheKey(cacheKey);\n\n  useEffect(() => {\n    if (!cacheKey) {\n      return;\n    }\n    const listener = new FetchLoopListener<T>(\n      cacheKey,\n      asyncFn,\n      refreshInterval,\n      rerender,\n    );\n    globalLoops.addListener(listener);\n    return () => globalLoops.removeListener(listener);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheKey, refreshInterval]);\n\n  if (!cacheKey) {\n    return [null, false];\n  }\n\n  const loaded = globalCache.has(cacheKey);\n  const data = loaded ? globalCache.get(cacheKey) : undefined;\n  return [data, loaded];\n}\n\nexport function refreshCache(cacheKey, clearCache = false) {\n  cacheKey = formatCacheKey(cacheKey);\n  if (clearCache) {\n    globalCache.delete(cacheKey);\n  }\n  const loop = globalLoops.loops.get(cacheKey);\n  if (loop) {\n    loop.refresh();\n    if (clearCache) {\n      loop.notifyListeners();\n    }\n  }\n}\n\nexport function setCache(cacheKey, value, { initializeOnly = false } = {}) {\n  cacheKey = formatCacheKey(cacheKey);\n  if (initializeOnly && globalCache.has(cacheKey)) {\n    return;\n  }\n  globalCache.set(cacheKey, value);\n  const loop = globalLoops.loops.get(cacheKey);\n  if (loop) {\n    loop.notifyListeners();\n  }\n}\n\nfunction formatCacheKey(cacheKey) {\n  if (Array.isArray(cacheKey)) {\n    return tuple(...cacheKey);\n  }\n  return cacheKey;\n}\n","import React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useConnection, useSolanaExplorerUrlSuffix } from './connection';\nimport Button from '@material-ui/core/Button';\nimport { confirmTransaction } from './utils';\n\nexport function useSendTransaction() {\n  const connection = useConnection();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [sending, setSending] = useState(false);\n\n  async function sendTransaction(\n    signaturePromise,\n    { onSuccess, onError } = {},\n  ) {\n    let id = enqueueSnackbar('Sending transaction...', {\n      variant: 'info',\n      persist: true,\n    });\n    setSending(true);\n    try {\n      let signature = await signaturePromise;\n      closeSnackbar(id);\n      id = enqueueSnackbar('Confirming transaction...', {\n        variant: 'info',\n        persist: true,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      await confirmTransaction(connection, signature);\n      closeSnackbar(id);\n      setSending(false);\n      enqueueSnackbar('Transaction confirmed', {\n        variant: 'success',\n        autoHideDuration: 15000,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      if (onSuccess) {\n        onSuccess(signature);\n      }\n    } catch (e) {\n      closeSnackbar(id);\n      setSending(false);\n      console.warn(e.message);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  }\n\n  return [sendTransaction, sending];\n}\n\nfunction ViewTransactionOnExplorerButton({ signature }) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n\nexport function useCallAsync() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  return async function callAsync(\n    promise,\n    {\n      progressMessage = 'Submitting...',\n      successMessage = 'Success',\n      onSuccess,\n      onError,\n    } = {},\n  ) {\n    let id = enqueueSnackbar(progressMessage, {\n      variant: 'info',\n      persist: true,\n    });\n    try {\n      let result = await promise;\n      closeSnackbar(id);\n      if (successMessage) {\n        enqueueSnackbar(successMessage, { variant: 'success' });\n      }\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (e) {\n      console.warn(e);\n      closeSnackbar(id);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  };\n}\n","import {\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  Account,\n  TransactionInstruction,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  assertOwner,\n  closeAccount,\n  initializeAccount,\n  initializeMint,\n  memoInstruction,\n  mintTo,\n  TOKEN_PROGRAM_ID,\n  transfer,\n} from './instructions';\nimport {\n  ACCOUNT_LAYOUT,\n  getOwnedAccountsFilters,\n  MINT_LAYOUT,\n  parseTokenAccountData,\n} from './data';\nimport bs58 from 'bs58';\n\nexport async function getOwnedTokenAccounts(connection, publicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection._rpcRequest('getProgramAccounts', [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      'failed to get token accounts owned by ' +\n        publicKey.toBase58() +\n        ': ' +\n        resp.error.message,\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length,\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    });\n}\n\nexport async function signAndSendTransaction(\n  connection,\n  transaction,\n  wallet,\n  signers,\n  skipPreflight = false,\n) {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash;\n  transaction.setSigners(\n    // fee payed by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey),\n  );\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  return await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight,\n    preflightCommitment: 'single',\n  });\n}\n\nexport async function nativeTransfer(connection, wallet, destination, amount) {\n  const tx = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: destination,\n      lamports: amount,\n    }),\n  );\n  return await signAndSendTransaction(connection, tx, wallet, []);\n}\n\nexport async function createAndInitializeMint({\n  connection,\n  owner, // Wallet for paying fees and allowed to mint new tokens\n  mint, // Account to hold token information\n  amount, // Number of tokens to issue\n  decimals,\n  initialAccount, // Account to hold newly issued tokens, if amount > 0\n}) {\n  let transaction = new Transaction();\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: owner.publicKey,\n      newAccountPubkey: mint.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MINT_LAYOUT.span,\n      ),\n      space: MINT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  transaction.add(\n    initializeMint({\n      mint: mint.publicKey,\n      decimals,\n      mintAuthority: owner.publicKey,\n    }),\n  );\n  let signers = [mint];\n  if (amount > 0) {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: owner.publicKey,\n        newAccountPubkey: initialAccount.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(\n          ACCOUNT_LAYOUT.span,\n        ),\n        space: ACCOUNT_LAYOUT.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    );\n    signers.push(initialAccount);\n    transaction.add(\n      initializeAccount({\n        account: initialAccount.publicKey,\n        mint: mint.publicKey,\n        owner: owner.publicKey,\n      }),\n    );\n    transaction.add(\n      mintTo({\n        mint: mint.publicKey,\n        destination: initialAccount.publicKey,\n        amount,\n        mintAuthority: owner.publicKey,\n      }),\n    );\n  }\n\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nexport async function createAndInitializeTokenAccount({\n  connection,\n  payer,\n  mintPublicKey,\n  newAccount,\n}) {\n  let transaction = new Transaction();\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        ACCOUNT_LAYOUT.span,\n      ),\n      space: ACCOUNT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  transaction.add(\n    initializeAccount({\n      account: newAccount.publicKey,\n      mint: mintPublicKey,\n      owner: payer.publicKey,\n    }),\n  );\n\n  let signers = [newAccount];\n  return await signAndSendTransaction(connection, transaction, payer, signers);\n}\n\nexport async function createAssociatedTokenAccount({\n  connection,\n  wallet,\n  splTokenMintAddress,\n}) {\n  const [ix, address] = await createAssociatedTokenAccountIx(\n    wallet.publicKey,\n    wallet.publicKey,\n    splTokenMintAddress,\n  );\n  const tx = new Transaction();\n  tx.add(ix);\n  tx.feePayer = wallet.publicKey;\n  const txSig = await signAndSendTransaction(connection, tx, wallet, []);\n\n  return [address, txSig];\n}\nasync function createAssociatedTokenAccountIx(\n  fundingAddress,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const associatedTokenAddress = await findAssociatedTokenAddress(\n    walletAddress,\n    splTokenMintAddress,\n  );\n  const systemProgramId = new PublicKey('11111111111111111111111111111111');\n  const keys = [\n    {\n      pubkey: fundingAddress,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: systemProgramId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TokenInstructions.TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  const ix = new TransactionInstruction({\n    keys,\n    programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n  return [ix, associatedTokenAddress];\n}\n\nexport async function findAssociatedTokenAddress(\n  walletAddress,\n  tokenMintAddress,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TokenInstructions.TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    )\n  )[0];\n}\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport async function transferTokens({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n  mint,\n  overrideDestinationCheck,\n}) {\n  const destinationAccountInfo = await connection.getAccountInfo(\n    destinationPublicKey,\n  );\n  if (\n    !!destinationAccountInfo &&\n    destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)\n  ) {\n    return await transferBetweenSplTokenAccounts({\n      connection,\n      owner,\n      sourcePublicKey,\n      destinationPublicKey,\n      amount,\n      memo,\n    });\n  }\n\n  if (\n    (!destinationAccountInfo || destinationAccountInfo.lamports === 0) &&\n    !overrideDestinationCheck\n  ) {\n    throw new Error('Cannot send to address with zero SOL balances');\n  }\n  const destinationSplTokenAccount = (\n    await getOwnedTokenAccounts(connection, destinationPublicKey)\n  )\n    .map(({ publicKey, accountInfo }) => {\n      return { publicKey, parsed: parseTokenAccountData(accountInfo.data) };\n    })\n    .filter(({ parsed }) => parsed.mint.equals(mint))\n    .sort((a, b) => {\n      return b.parsed.amount - a.parsed.amount;\n    })[0];\n  if (destinationSplTokenAccount) {\n    return await transferBetweenSplTokenAccounts({\n      connection,\n      owner,\n      sourcePublicKey,\n      destinationPublicKey: destinationSplTokenAccount.publicKey,\n      amount,\n      memo,\n    });\n  }\n  return await createAndTransferToAccount({\n    connection,\n    owner,\n    sourcePublicKey,\n    destinationPublicKey,\n    amount,\n    memo,\n    mint,\n  });\n}\n\n// SPL tokens only.\nexport async function transferAndClose({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n}) {\n  const tx = createTransferBetweenSplTokenAccountsInstruction({\n    ownerPublicKey: owner.publicKey,\n    sourcePublicKey,\n    destinationPublicKey,\n    amount,\n  });\n  tx.add(\n    closeAccount({\n      source: sourcePublicKey,\n      destination: owner.publicKey,\n      owner: owner.publicKey,\n    }),\n  );\n  let signers = [];\n  return await signAndSendTransaction(connection, tx, owner, signers);\n}\n\nfunction createTransferBetweenSplTokenAccountsInstruction({\n  ownerPublicKey,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n}) {\n  let transaction = new Transaction().add(\n    transfer({\n      source: sourcePublicKey,\n      destination: destinationPublicKey,\n      owner: ownerPublicKey,\n      amount,\n    }),\n  );\n  if (memo) {\n    transaction.add(memoInstruction(memo));\n  }\n  return transaction;\n}\n\nasync function transferBetweenSplTokenAccounts({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n}) {\n  const transaction = createTransferBetweenSplTokenAccountsInstruction({\n    ownerPublicKey: owner.publicKey,\n    sourcePublicKey,\n    destinationPublicKey,\n    amount,\n    memo,\n  });\n  let signers = [];\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nasync function createAndTransferToAccount({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n  mint,\n}) {\n  const newAccount = new Account();\n  let transaction = new Transaction();\n  transaction.add(\n    assertOwner({\n      account: destinationPublicKey,\n      owner: SystemProgram.programId,\n    }),\n  );\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: owner.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        ACCOUNT_LAYOUT.span,\n      ),\n      space: ACCOUNT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  transaction.add(\n    initializeAccount({\n      account: newAccount.publicKey,\n      mint,\n      owner: destinationPublicKey,\n    }),\n  );\n  const transferBetweenAccountsTxn = createTransferBetweenSplTokenAccountsInstruction(\n    {\n      ownerPublicKey: owner.publicKey,\n      sourcePublicKey,\n      destinationPublicKey: newAccount.publicKey,\n      amount,\n      memo,\n    },\n  );\n  transaction.add(transferBetweenAccountsTxn);\n  let signers = [newAccount];\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nexport async function closeTokenAccount({\n  connection,\n  owner,\n  sourcePublicKey,\n  skipPreflight,\n}) {\n  let transaction = new Transaction().add(\n    closeAccount({\n      source: sourcePublicKey,\n      destination: owner.publicKey,\n      owner: owner.publicKey,\n    }),\n  );\n  let signers = [];\n  return await signAndSendTransaction(\n    connection,\n    transaction,\n    owner,\n    signers,\n    skipPreflight,\n  );\n}\n","import { pbkdf2 } from 'crypto';\nimport { randomBytes, secretbox } from 'tweetnacl';\nimport * as bip32 from 'bip32';\nimport bs58 from 'bs58';\nimport { EventEmitter } from 'events';\n\nexport async function generateMnemonicAndSeed() {\n  const bip39 = await import('bip39');\n  const mnemonic = bip39.generateMnemonic(256);\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return { mnemonic, seed: Buffer.from(seed).toString('hex') };\n}\n\nexport async function mnemonicToSeed(mnemonic) {\n  const bip39 = await import('bip39');\n  if (!bip39.validateMnemonic(mnemonic)) {\n    throw new Error('Invalid seed words');\n  }\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return Buffer.from(seed).toString('hex');\n}\n\nlet unlockedMnemonicAndSeed = (() => {\n  const stored = JSON.parse(\n    sessionStorage.getItem('unlocked') ||\n      localStorage.getItem('unlocked') ||\n      'null',\n  );\n  if (stored === null) {\n    return {\n      mnemonic: null,\n      seed: null,\n      importsEncryptionKey: null,\n      derivationPath: null,\n    };\n  }\n  return {\n    importsEncryptionKey: deriveImportsEncryptionKey(stored.seed),\n    ...stored,\n  };\n})();\nexport const walletSeedChanged = new EventEmitter();\n\nexport function getUnlockedMnemonicAndSeed() {\n  return unlockedMnemonicAndSeed;\n}\n\nexport function hasLockedMnemonicAndSeed() {\n  return !!localStorage.getItem('locked');\n}\n\nfunction setUnlockedMnemonicAndSeed(\n  mnemonic,\n  seed,\n  importsEncryptionKey,\n  derivationPath,\n) {\n  unlockedMnemonicAndSeed = {\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  };\n  walletSeedChanged.emit('change', unlockedMnemonicAndSeed);\n}\n\nexport async function storeMnemonicAndSeed(\n  mnemonic,\n  seed,\n  password,\n  derivationPath,\n) {\n  const plaintext = JSON.stringify({ mnemonic, seed, derivationPath });\n  if (password) {\n    const salt = randomBytes(16);\n    const kdf = 'pbkdf2';\n    const iterations = 100000;\n    const digest = 'sha256';\n    const key = await deriveEncryptionKey(password, salt, iterations, digest);\n    const nonce = randomBytes(secretbox.nonceLength);\n    const encrypted = secretbox(Buffer.from(plaintext), nonce, key);\n    localStorage.setItem(\n      'locked',\n      JSON.stringify({\n        encrypted: bs58.encode(encrypted),\n        nonce: bs58.encode(nonce),\n        kdf,\n        salt: bs58.encode(salt),\n        iterations,\n        digest,\n      }),\n    );\n    localStorage.removeItem('unlocked');\n    sessionStorage.removeItem('unlocked');\n  } else {\n    localStorage.setItem('unlocked', plaintext);\n    localStorage.removeItem('locked');\n    sessionStorage.removeItem('unlocked');\n  }\n  const importsEncryptionKey = deriveImportsEncryptionKey(seed);\n  setUnlockedMnemonicAndSeed(\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  );\n}\n\nexport async function loadMnemonicAndSeed(password, stayLoggedIn) {\n  const {\n    encrypted: encodedEncrypted,\n    nonce: encodedNonce,\n    salt: encodedSalt,\n    iterations,\n    digest,\n  } = JSON.parse(localStorage.getItem('locked'));\n  const encrypted = bs58.decode(encodedEncrypted);\n  const nonce = bs58.decode(encodedNonce);\n  const salt = bs58.decode(encodedSalt);\n  const key = await deriveEncryptionKey(password, salt, iterations, digest);\n  const plaintext = secretbox.open(encrypted, nonce, key);\n  if (!plaintext) {\n    throw new Error('Incorrect password');\n  }\n  const decodedPlaintext = Buffer.from(plaintext).toString();\n  const { mnemonic, seed, derivationPath } = JSON.parse(decodedPlaintext);\n  if (stayLoggedIn) {\n    sessionStorage.setItem('unlocked', decodedPlaintext);\n  }\n  const importsEncryptionKey = deriveImportsEncryptionKey(seed);\n  setUnlockedMnemonicAndSeed(\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  );\n  return { mnemonic, seed, derivationPath };\n}\n\nasync function deriveEncryptionKey(password, salt, iterations, digest) {\n  return new Promise((resolve, reject) =>\n    pbkdf2(\n      password,\n      salt,\n      iterations,\n      secretbox.keyLength,\n      digest,\n      (err, key) => (err ? reject(err) : resolve(key)),\n    ),\n  );\n}\n\nexport function lockWallet() {\n  setUnlockedMnemonicAndSeed(null, null, null, null);\n}\n\n// Returns the 32 byte key used to encrypt imported private keys.\nfunction deriveImportsEncryptionKey(seed) {\n  // SLIP16 derivation path.\n  return bip32.fromSeed(Buffer.from(seed, 'hex')).derivePath(\"m/10016'/0\")\n    .privateKey;\n}\n\nexport function forgetWallet() {\n  localStorage.clear();\n  sessionStorage.removeItem('unlocked');\n  unlockedMnemonicAndSeed = {\n    mnemonic: null,\n    seed: null,\n    importsEncryptionKey: null,\n  };\n  walletSeedChanged.emit('change', unlockedMnemonicAndSeed);\n  window.location.reload();\n}\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default function SolanaIcon() {\n  return (\n    <SvgIcon viewBox=\"0 0 450 450\">\n      <path d=\"m374.393945,136.203008c-2.518,2.519 -5.934,3.934 -9.496,3.934l-336.443,0c-11.891,0 -17.914,-14.315 -9.601,-22.817l55.186,-56.441c2.527,-2.584 5.988,-4.041 9.602,-4.041l337.697,0c11.964,0 17.955,14.465 9.496,22.925l-56.441,56.44z\" />\n      <path d=\"m374.393945,392.628008c-2.518,2.518 -5.934,3.933 -9.496,3.933l-336.443,0c-11.891,0 -17.914,-14.315 -9.601,-22.817l55.186,-56.441c2.527,-2.584 5.988,-4.041 9.602,-4.041l337.697,0c11.964,0 17.955,14.465 9.496,22.925l-56.441,56.441z\" />\n      <path d=\"m374.393945,188.933008c-2.518,-2.518 -5.934,-3.933 -9.496,-3.933l-336.443,0c-11.891,0 -17.914,14.315 -9.601,22.817l55.186,56.441c2.527,2.584 5.988,4.04 9.602,4.04l337.697,0c11.964,0 17.955,-14.464 9.496,-22.924l-56.441,-56.441z\" />\n    </SvgIcon>\n  );\n}\n","import React, { useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Switch from '@material-ui/core/Switch';\nimport { Account } from '@solana/web3.js';\nimport DialogForm from './DialogForm';\n\nexport default function AddAccountDialog({ open, onAdd, onClose }) {\n  const [name, setName] = useState('');\n  const [isImport, setIsImport] = useState(false);\n  const [importedPrivateKey, setPrivateKey] = useState('');\n\n  const importedAccount = isImport\n    ? decodeAccount(importedPrivateKey)\n    : undefined;\n  const isAddEnabled = isImport ? name && importedAccount !== undefined : name;\n\n  return (\n    <DialogForm\n      open={open}\n      onEnter={() => {\n        setName('');\n        setIsImport(false);\n        setPrivateKey('');\n      }}\n      onClose={onClose}\n      onSubmit={() => onAdd({ name, importedAccount })}\n      fullWidth\n    >\n      <DialogTitle>Add account</DialogTitle>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <TextField\n            label=\"Name\"\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            value={name}\n            onChange={(e) => setName(e.target.value.trim())}\n          />\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={isImport}\n                  onChange={() => setIsImport(!isImport)}\n                />\n              }\n              label=\"Import private key\"\n            />\n          </FormGroup>\n          {isImport && (\n            <TextField\n              label=\"Paste your private key here\"\n              fullWidth\n              type=\"password\"\n              value={importedPrivateKey}\n              variant=\"outlined\"\n              margin=\"normal\"\n              onChange={(e) => setPrivateKey(e.target.value.trim())}\n            />\n          )}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n        <Button type=\"submit\" color=\"primary\" disabled={!isAddEnabled}>\n          Add\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\n/**\n * Returns an account object when given the private key\n *\n * @param {string} privateKey - the private key in array format\n */\nfunction decodeAccount(privateKey) {\n  try {\n    const a = new Account(JSON.parse(privateKey));\n    return a;\n  } catch (_) {\n    return undefined;\n  }\n}\n","import React from 'react';\nimport DialogForm from './DialogForm';\nimport { forgetWallet } from '../utils/wallet-seed';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { DialogContentText } from '@material-ui/core';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nexport default function DeleteAccountDialog({\n  open,\n  onClose,\n  isDeleteAccountEnabled,\n}) {\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => {\n          forgetWallet();\n          onClose();\n        }}\n        fullWidth\n      >\n        <DialogTitle>Delete Account</DialogTitle>\n        <DialogContentText style={{ margin: 20 }}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            You will not be able to recover the current accounts without the\n            seed phrase, and the account private key. This action will delete\n            all current accounts from your browser.\n            <br />\n            <br />\n            <strong style={{ textAlign: 'center' }}>\n              To prevent loss of funds, please ensure you have the seed phrase\n              and the private key for all current accounts.\n            </strong>\n          </div>\n        </DialogContentText>\n        <DialogActions>\n          <Button onClick={onClose}>Close</Button>\n          <Button\n            type=\"submit\"\n            color=\"secondary\"\n            disabled={!isDeleteAccountEnabled}\n          >\n            Delete Account\n          </Button>\n        </DialogActions>\n      </DialogForm>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { LedgerWalletProvider } from '../utils/walletProvider/ledger';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useSnackbar } from 'notistack';\n\nexport default function AddHardwareWalletDialog({ open, onAdd, onClose }) {\n  const [pubKey, setPubKey] = useState();\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    (async () => {\n      if (open) {\n        try {\n          const provider = new LedgerWalletProvider();\n          await provider.init();\n          setPubKey(provider.publicKey);\n        } catch (err) {\n          console.log(\n            `received error when attempting to connect ledger: ${err}`,\n          );\n          if (err.statusCode === 0x6804) {\n            enqueueSnackbar('Unlock ledger device', { variant: 'error' });\n          }\n          setPubKey(undefined);\n          onClose();\n        }\n      }\n    })();\n  }, [open, onClose, enqueueSnackbar]);\n\n  return (\n    <DialogForm\n      open={open}\n      onEnter={() => {}}\n      onClose={() => {\n        setPubKey(undefined);\n        onClose();\n      }}\n      onSubmit={() => {\n        setPubKey(undefined);\n        onAdd(pubKey);\n        onClose();\n      }}\n      fullWidth\n    >\n      <DialogTitle>Add hardware wallet</DialogTitle>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {pubKey ? (\n            <>\n              <b>Hardware wallet detected:</b>\n              <div>{pubKey.toString()}</div>\n            </>\n          ) : (\n            <>\n              <b>Connect your ledger and open the Solana application</b>\n              <CircularProgress />\n            </>\n          )}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            setPubKey(undefined);\n            onClose();\n          }}\n        >\n          Close\n        </Button>\n        <Button type=\"submit\" color=\"primary\" disabled={!pubKey}>\n          Add\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n","import React, { useState } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useConnectionConfig, MAINNET_URL } from '../utils/connection';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { useWalletSelector } from '../utils/wallet';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CheckIcon from '@material-ui/icons/Check';\nimport AddIcon from '@material-ui/icons/Add';\nimport ExitToApp from '@material-ui/icons/ExitToApp';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport UsbIcon from '@material-ui/icons/Usb';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport SolanaIcon from './SolanaIcon';\nimport CodeIcon from '@material-ui/icons/Code';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddAccountDialog from './AddAccountDialog';\nimport DeleteAccountDialog from './DeleteAccountDialog';\nimport AddHardwareWalletDialog from './AddHarwareWalletDialog';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    flexGrow: 1,\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  button: {\n    marginLeft: theme.spacing(1),\n  },\n  menuItemIcon: {\n    minWidth: 32,\n  },\n}));\n\nexport default function NavigationFrame({ children }) {\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title} component=\"h1\">\n            Solana SPL Token Wallet\n          </Typography>\n          <WalletSelector />\n          <NetworkSelector />\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>{children}</main>\n      <Footer />\n    </>\n  );\n}\n\nfunction NetworkSelector() {\n  const { endpoint, setEndpoint } = useConnectionConfig();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const classes = useStyles();\n\n  const networks = [\n    MAINNET_URL,\n    clusterApiUrl('devnet'),\n    clusterApiUrl('testnet'),\n    'http://localhost:8899',\n  ];\n\n  const networkLabels = {\n    [MAINNET_URL]: 'Mainnet Beta',\n    [clusterApiUrl('devnet')]: 'Devnet',\n    [clusterApiUrl('testnet')]: 'Testnet',\n  };\n\n  return (\n    <>\n      <Hidden xsDown>\n        <Button\n          color=\"inherit\"\n          onClick={(e) => setAnchorEl(e.target)}\n          className={classes.button}\n        >\n          {networkLabels[endpoint] ?? 'Network'}\n        </Button>\n      </Hidden>\n      <Hidden smUp>\n        <Tooltip title=\"Select Network\" arrow>\n          <IconButton color=\"inherit\" onClick={(e) => setAnchorEl(e.target)}>\n            <SolanaIcon />\n          </IconButton>\n        </Tooltip>\n      </Hidden>\n      <Menu\n        anchorEl={anchorEl}\n        open={!!anchorEl}\n        onClose={() => setAnchorEl(null)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        getContentAnchorEl={null}\n      >\n        {networks.map((network) => (\n          <MenuItem\n            key={network}\n            onClick={() => {\n              setAnchorEl(null);\n              setEndpoint(network);\n            }}\n            selected={network === endpoint}\n          >\n            <ListItemIcon className={classes.menuItemIcon}>\n              {network === endpoint ? <CheckIcon fontSize=\"small\" /> : null}\n            </ListItemIcon>\n            {network}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n}\n\nfunction WalletSelector() {\n  const { accounts, setWalletSelector, addAccount } = useWalletSelector();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [addAccountOpen, setAddAccountOpen] = useState(false);\n  const [\n    addHardwareWalletDialogOpen,\n    setAddHardwareWalletDialogOpen,\n  ] = useState(false);\n  const [deleteAccountOpen, setDeleteAccountOpen] = useState(false);\n  const [isDeleteAccountEnabled, setIsDeleteAccountEnabled] = useState(false);\n  const classes = useStyles();\n\n  if (accounts.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <AddHardwareWalletDialog\n        open={addHardwareWalletDialogOpen}\n        onClose={() => setAddHardwareWalletDialogOpen(false)}\n        onAdd={(pubKey) => {\n          addAccount({\n            name: 'Hardware wallet',\n            importedAccount: pubKey.toString(),\n            ledger: true,\n          });\n          setWalletSelector({\n            walletIndex: undefined,\n            importedPubkey: pubKey.toString(),\n            ledger: true,\n          });\n        }}\n      />\n      <AddAccountDialog\n        open={addAccountOpen}\n        onClose={() => setAddAccountOpen(false)}\n        onAdd={({ name, importedAccount }) => {\n          addAccount({ name, importedAccount });\n          setWalletSelector({\n            walletIndex: importedAccount ? undefined : accounts.length,\n            importedPubkey: importedAccount\n              ? importedAccount.publicKey.toString()\n              : undefined,\n            ledger: false,\n          });\n          setAddAccountOpen(false);\n        }}\n      />\n      <DeleteAccountDialog\n        open={deleteAccountOpen}\n        onClose={() => setDeleteAccountOpen(false)}\n        isDeleteAccountEnabled={isDeleteAccountEnabled}\n      />\n      <Hidden xsDown>\n        <Button\n          color=\"inherit\"\n          onClick={(e) => setAnchorEl(e.target)}\n          className={classes.button}\n        >\n          Account\n        </Button>\n      </Hidden>\n      <Hidden smUp>\n        <Tooltip title=\"Select Account\" arrow>\n          <IconButton color=\"inherit\" onClick={(e) => setAnchorEl(e.target)}>\n            <AccountIcon />\n          </IconButton>\n        </Tooltip>\n      </Hidden>\n      <Menu\n        anchorEl={anchorEl}\n        open={!!anchorEl}\n        onClose={() => setAnchorEl(null)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        getContentAnchorEl={null}\n      >\n        {accounts.map(({ isSelected, selector, address, name, label }) => (\n          <MenuItem\n            key={address.toBase58()}\n            onClick={() => {\n              setAnchorEl(null);\n              setWalletSelector(selector);\n            }}\n            selected={isSelected}\n            component=\"div\"\n          >\n            <ListItemIcon className={classes.menuItemIcon}>\n              {isSelected ? <CheckIcon fontSize=\"small\" /> : null}\n            </ListItemIcon>\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              <Typography>{name}</Typography>\n              <Typography color=\"textSecondary\">\n                {address.toBase58()}\n              </Typography>\n            </div>\n          </MenuItem>\n        ))}\n        <Divider />\n        <MenuItem onClick={() => setAddHardwareWalletDialogOpen(true)}>\n          <ListItemIcon className={classes.menuItemIcon}>\n            <UsbIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Import Hardware Wallet\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            setAnchorEl(null);\n            setAddAccountOpen(true);\n          }}\n        >\n          <ListItemIcon className={classes.menuItemIcon}>\n            <AddIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Add Account\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            setAnchorEl(null);\n            setIsDeleteAccountEnabled(false);\n            setDeleteAccountOpen(true);\n            setTimeout(() => {\n              setIsDeleteAccountEnabled(true);\n            }, 3000);\n          }}\n        >\n          <ListItemIcon className={classes.menuItemIcon}>\n            <ExitToApp fontSize=\"small\" />\n          </ListItemIcon>\n          Delete Account\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n\nconst useFooterStyles = makeStyles((theme) => ({\n  footer: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction Footer() {\n  const classes = useFooterStyles();\n  return (\n    <footer className={classes.footer}>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        component=\"a\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        href=\"https://github.com/serum-foundation/spl-token-wallet\"\n        startIcon={<CodeIcon />}\n      >\n        View Source\n      </Button>\n    </footer>\n  );\n}\n","import {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button } from '@material-ui/core';\nimport React from 'react';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    let mint = new Account();\n    updateTokenName(\n      mint.publicKey,\n      `Test Token ${abbreviateAddress(mint.publicKey)}`,\n      `TEST${mint.publicKey.toBase58().slice(0, 2)}`,\n    );\n    sendTransaction(\n      createAndInitializeMint({\n        connection: wallet.connection,\n        owner: wallet,\n        mint,\n        amount: 1000,\n        decimals: 2,\n        initialAccount: new Account(),\n      }),\n      { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    );\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  return (\n    <div style={{ display: 'flex' }}>\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet SOL for free. Only enabled on the devnet'\n            : 'Receive some devnet SOL for free'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button>\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires SOL balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: 24 }}\n          >\n            Mint Test Token\n          </Button>\n        </span>\n      </Tooltip>\n    </div>\n  );\n}\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport BalancesList from '../components/BalancesList';\nimport Grid from '@material-ui/core/Grid';\nimport { useIsProdNetwork } from '../utils/connection';\nimport DebugButtons from '../components/DebugButtons';\n\nexport default function WalletPage() {\n  const isProdNetwork = useIsProdNetwork();\n  return (\n    <Container fixed maxWidth=\"md\">\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <BalancesList />\n        </Grid>\n        {isProdNetwork ? null : (\n          <Grid item xs={12}>\n            <DebugButtons />\n          </Grid>\n        )}\n      </Grid>\n    </Container>\n  );\n}\n","import bs58 from 'bs58';\nimport { Message, SystemInstruction, SystemProgram } from '@solana/web3.js';\nimport {\n  decodeInstruction,\n  decodeTokenInstructionData,\n  Market,\n  MARKETS,\n  TokenInstructions,\n  SETTLE_FUNDS_BASE_WALLET_INDEX,\n  SETTLE_FUNDS_QUOTE_WALLET_INDEX,\n  NEW_ORDER_OPEN_ORDERS_INDEX,\n  NEW_ORDER_OWNER_INDEX,\n} from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './tokens/instructions';\n\nconst RAYDIUM_STAKE_PROGRAM_ID = new PublicKey('EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q');\nconst RAYDIUM_LP_PROGRAM_ID = new PublicKey('RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr');\n\nconst marketCache = {};\nlet marketCacheConnection = null;\nconst cacheDuration = 15 * 1000;\n\nexport const decodeMessage = async (connection, wallet, message) => {\n  // get message object\n  const transactionMessage = Message.from(message);\n  if (!transactionMessage?.instructions || !transactionMessage?.accountKeys) {\n    return;\n  }\n\n  // get owned keys (used for security checks)\n  const publicKey = wallet.publicKey;\n\n  // get instructions\n  const instructions = [];\n  for (var i = 0; i < transactionMessage.instructions.length; i++) {\n    let transactionInstruction = transactionMessage.instructions[i];\n    const instruction = await toInstruction(\n      connection,\n      publicKey,\n      transactionMessage?.accountKeys,\n      transactionInstruction,\n      i,\n    );\n    instructions.push({\n      ...instruction,\n      rawData: transactionInstruction?.data,\n    });\n  }\n  return instructions;\n};\n\nconst toInstruction = async (\n  connection,\n  publicKey,\n  accountKeys,\n  instruction,\n  index,\n) => {\n  if (\n    !instruction?.data ||\n    !instruction?.accounts ||\n    !instruction?.programIdIndex\n  ) {\n    return;\n  }\n\n  // get instruction data\n  const decoded = bs58.decode(instruction.data);\n\n  const programId = getAccountByIndex(\n    [instruction.programIdIndex],\n    accountKeys,\n    0,\n  );\n  if (!programId) {\n    return null;\n  }\n\n  try {\n    if (programId.equals(SystemProgram.programId)) {\n      console.log('[' + index + '] Handled as system instruction');\n      return handleSystemInstruction(publicKey, instruction, accountKeys);\n    } else if (programId.equals(TOKEN_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as token instruction');\n      let decodedInstruction = decodeTokenInstruction(decoded);\n      return handleTokenInstruction(\n        publicKey,\n        instruction.accounts,\n        decodedInstruction,\n        accountKeys,\n      );\n    } else if (\n      MARKETS.some(\n        (market) => market.programId && market.programId.equals(programId),\n      )\n    ) {\n      console.log('[' + index + '] Handled as dex instruction');\n      let decodedInstruction = decodeInstruction(decoded);\n      return await handleDexInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else if (programId.equals(RAYDIUM_STAKE_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium stake instruction');\n      const decodedInstruction = decodeStakeInstruction(decoded);\n      return await handleRayStakeInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    } else if (programId.equals(RAYDIUM_LP_PROGRAM_ID)) {\n      console.log('[' + index + '] Handled as raydium lp instruction');\n      const decodedInstruction = decodeLpInstruction(decoded);\n      return await handleRayLpInstruction(\n        connection,\n        instruction,\n        accountKeys,\n        decodedInstruction,\n      );\n    }\n  } catch {}\n\n  // all decodings failed\n  console.log('[' + index + '] Failed, data: ' + JSON.stringify(decoded));\n\n  return;\n};\n\nconst handleRayStakeInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  // TODO\n  return {\n    type: 'raydium',\n  };\n};\n\nconst handleRayLpInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  // TODO\n  return {\n    type: 'raydium',\n  };\n};\n\nconst decodeStakeInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst decodeLpInstruction = () => {\n  // TODO\n  return undefined;\n};\n\nconst handleDexInstruction = async (\n  connection,\n  instruction,\n  accountKeys,\n  decodedInstruction,\n) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  }\n\n  const { accounts, programIdIndex } = instruction;\n\n  // get market info\n  const marketInfo =\n    accountKeys &&\n    MARKETS.find(\n      (market) =>\n        accountKeys.findIndex((accountKey) =>\n          accountKey.equals(market.address),\n        ) > -1,\n    );\n\n  // get market\n  let market, programIdAddress;\n  try {\n    const marketAddress =\n      marketInfo?.address || getAccountByIndex(accounts, accountKeys, 0);\n    programIdAddress =\n      marketInfo?.programId ||\n      getAccountByIndex([programIdIndex], accountKeys, 0);\n    const strAddress = marketAddress.toBase58();\n    const now = new Date().getTime();\n    if (\n      !(\n        connection === marketCacheConnection &&\n        strAddress in marketCache &&\n        now - marketCache[strAddress].ts < cacheDuration\n      )\n    ) {\n      marketCacheConnection = connection;\n      console.log('Loading market', strAddress);\n      marketCache[strAddress] = {\n        market: await Market.load(\n          connection,\n          marketAddress,\n          {},\n          programIdAddress,\n        ),\n        ts: now,\n      };\n    }\n    market = marketCache[strAddress].market;\n  } catch (e) {\n    console.log('Error loading market: ' + e.message);\n  }\n\n  // get data\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n  if (type === 'settleFunds') {\n    const settleFundsData = getSettleFundsData(accounts, accountKeys);\n    if (!settleFundsData) {\n      return;\n    } else {\n      data = { ...data, ...settleFundsData };\n    }\n  } else if (type === 'newOrder') {\n    const newOrderData = getNewOrderData(accounts, accountKeys);\n    data = { ...data, ...newOrderData };\n  }\n  return {\n    type,\n    data,\n    market,\n    marketInfo,\n  };\n};\n\nconst decodeTokenInstruction = (bufferData) => {\n  if (!bufferData) {\n    return;\n  }\n\n  if (bufferData.length === 1) {\n    if (bufferData[0] === 1) {\n      return { initializeAccount: {} };\n    } else if (bufferData[0] === 9) {\n      return { closeAccount: {} };\n    }\n  } else {\n    return decodeTokenInstructionData(bufferData);\n  }\n};\n\nconst handleSystemInstruction = (publicKey, instruction, accountKeys) => {\n  const { programIdIndex, accounts, data } = instruction;\n  if (!programIdIndex || !accounts || !data) {\n    return;\n  }\n\n  // construct system instruction\n  const systemInstruction = {\n    programId: accountKeys[programIdIndex],\n    keys: accounts.map((accountIndex) => ({\n      pubkey: accountKeys[accountIndex],\n    })),\n    data: bs58.decode(data),\n  };\n\n  // get layout\n  let decoded;\n  const type = SystemInstruction.decodeInstructionType(systemInstruction);\n  switch (type) {\n    case 'Create':\n      decoded = SystemInstruction.decodeCreateAccount(systemInstruction);\n      break;\n    case 'CreateWithSeed':\n      decoded = SystemInstruction.decodeCreateWithSeed(systemInstruction);\n      break;\n    case 'Allocate':\n      decoded = SystemInstruction.decodeAllocate(systemInstruction);\n      break;\n    case 'AllocateWithSeed':\n      decoded = SystemInstruction.decodeAllocateWithSeed(systemInstruction);\n      break;\n    case 'Assign':\n      decoded = SystemInstruction.decodeAssign(systemInstruction);\n      break;\n    case 'AssignWithSeed':\n      decoded = SystemInstruction.decodeAssignWithSeed(systemInstruction);\n      break;\n    case 'Transfer':\n      decoded = SystemInstruction.decodeTransfer(systemInstruction);\n      break;\n    case 'AdvanceNonceAccount':\n      decoded = SystemInstruction.decodeNonceAdvance(systemInstruction);\n      break;\n    case 'WithdrawNonceAccount':\n      decoded = SystemInstruction.decodeNonceWithdraw(systemInstruction);\n      break;\n    case 'InitializeNonceAccount':\n      decoded = SystemInstruction.decodeNonceInitialize(systemInstruction);\n      break;\n    case 'AuthorizeNonceAccount':\n      decoded = SystemInstruction.decodeNonceAuthorize(systemInstruction);\n      break;\n    default:\n      return;\n  }\n\n  if (\n    !decoded ||\n    (decoded.fromPubkey && !publicKey.equals(decoded.fromPubkey))\n  ) {\n    return;\n  }\n\n  return {\n    type: 'system' + type,\n    data: decoded,\n  };\n};\n\nconst handleTokenInstruction = (\n  publicKey,\n  accounts,\n  decodedInstruction,\n  accountKeys,\n) => {\n  if (!decodedInstruction || Object.keys(decodedInstruction).length > 1) {\n    return;\n  }\n\n  // get data\n  const type = Object.keys(decodedInstruction)[0];\n  let data = decodedInstruction[type];\n  if (type === 'initializeAccount') {\n    const initializeAccountData = getInitializeAccountData(\n      publicKey,\n      accounts,\n      accountKeys,\n    );\n    data = { ...data, ...initializeAccountData };\n  } else if (type === 'transfer') {\n    const transferData = getTransferData(publicKey, accounts, accountKeys);\n    data = { ...data, ...transferData };\n  } else if (type === 'closeAccount') {\n    const closeAccountData = getCloseAccountData(\n      publicKey,\n      accounts,\n      accountKeys,\n    );\n    data = { ...data, ...closeAccountData };\n  }\n\n  return {\n    type,\n    data,\n  };\n};\n\nconst getNewOrderData = (accounts, accountKeys) => {\n  const openOrdersPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_OPEN_ORDERS_INDEX,\n  );\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    NEW_ORDER_OWNER_INDEX,\n  );\n  return { openOrdersPubkey, ownerPubkey };\n};\n\nconst getSettleFundsData = (accounts, accountKeys) => {\n  const basePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    SETTLE_FUNDS_BASE_WALLET_INDEX,\n  );\n\n  const quotePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    SETTLE_FUNDS_QUOTE_WALLET_INDEX,\n  );\n\n  if (!basePubkey || !quotePubkey) {\n    return;\n  }\n\n  return { basePubkey, quotePubkey };\n};\n\nconst getTransferData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_SOURCE_INDEX,\n  );\n\n  const destinationPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_DESTINATION_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { sourcePubkey, destinationPubkey, ownerPubkey };\n};\n\nconst getInitializeAccountData = (publicKey, accounts, accountKeys) => {\n  const accountPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_ACCOUNT_INDEX,\n  );\n\n  const mintPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_MINT_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.INITIALIZE_ACCOUNT_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { accountPubkey, mintPubkey, ownerPubkey };\n};\n\nconst getCloseAccountData = (publicKey, accounts, accountKeys) => {\n  const sourcePubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_SOURCE_INDEX,\n  );\n\n  const destinationPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_DESTINATION_INDEX,\n  );\n\n  const ownerPubkey = getAccountByIndex(\n    accounts,\n    accountKeys,\n    TokenInstructions.TRANSFER_OWNER_INDEX,\n  );\n\n  if (!ownerPubkey || !publicKey.equals(ownerPubkey)) {\n    return;\n  }\n\n  return { sourcePubkey, destinationPubkey, ownerPubkey };\n};\n\nconst getAccountByIndex = (accounts, accountKeys, accountIndex) => {\n  const index = accounts.length > accountIndex && accounts[accountIndex];\n  return accountKeys?.length > index && accountKeys[index];\n};\n","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function LabelValue({ label, value, link = false, onClick }) {\n  return (\n    <Typography>\n      {label}:{' '}\n      {link ? (\n        <Link href=\"#\" onClick={onClick}>\n          {value}\n        </Link>\n      ) : (\n        <span style={{ color: '#7B7B7B' }}>{value}</span>\n      )}\n    </Typography>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { useWallet } from '../../utils/wallet';\n\nexport default function Neworder({ instruction, onOpenAddress }) {\n  const wallet = useWallet();\n  const { data, market, marketInfo } = instruction;\n  const { side, limitPrice, maxQuantity, orderType, ownerPubkey } = data;\n\n  const marketLabel =\n    (marketInfo &&\n      marketInfo?.name + (marketInfo?.deprecated ? ' (deprecated)' : '')) ||\n    market?._decoded?.ownAddress?.toBase58() ||\n    'Unknown';\n\n  const getAddressValue = (address) => {\n    const isOwner = wallet.publicKey.equals(address);\n    return isOwner ? 'This wallet' : address?.toBase58() || 'Unknown';\n  };\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        Place an order\n      </Typography>\n      <LabelValue\n        label=\"Market\"\n        value={marketLabel}\n        link={true}\n        onClick={() =>\n          onOpenAddress(\n            (marketInfo?.address || market?._decoded?.ownAddress)?.toBase58(),\n          )\n        }\n      />\n      <LabelValue\n        label=\"Side\"\n        value={side.charAt(0).toUpperCase() + side.slice(1)}\n      />\n      <LabelValue\n        label=\"Price\"\n        value={market?.priceLotsToNumber(limitPrice) || '' + limitPrice}\n      />\n      <LabelValue\n        label=\"Quantity\"\n        value={market?.baseSizeLotsToNumber(maxQuantity) || '' + maxQuantity}\n      />\n      <LabelValue\n        label=\"Type\"\n        value={orderType.charAt(0).toUpperCase() + orderType.slice(1)}\n      />\n      <LabelValue\n        label=\"Owner\"\n        link={ownerPubkey}\n        value={ownerPubkey ? getAddressValue(ownerPubkey) : ownerPubkey}\n        onOpenAddress={() =>\n          ownerPubkey && onOpenAddress(ownerPubkey?.toBase58())\n        }\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function UnknownInstruction({ instruction }) {\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        Unknown instruction:\n      </Typography>\n      <Typography style={{ wordBreak: 'break-all' }}>\n        {instruction?.rawData}\n      </Typography>\n    </>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\n\nconst TYPE_LABELS = {\n  systemCreate: 'Create account',\n  systemTransfer: 'Transfer SOL',\n};\n\nconst DATA_LABELS = {\n  toPubkey: { label: 'To', address: true },\n  accountPubkey: { label: 'Account', address: true },\n  basePubkey: { label: 'Base', address: true },\n  seed: { label: 'Seed', address: false },\n  noncePubkey: { label: 'Nonce', address: true },\n  authorizedPubkey: { label: 'Authorized', address: true },\n  newAuthorizedPubkey: { label: 'New authorized', address: true },\n  newAccountPubkey: { label: 'New account', address: true },\n  amount: { label: 'Amount', address: false },\n  lamports: { label: 'Lamports', address: false },\n};\n\nexport default function SystemInstruction({ instruction, onOpenAddress }) {\n  const { type, data } = instruction;\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {TYPE_LABELS[type]}\n      </Typography>\n      {data &&\n        Object.entries(data).map(([key, value]) => {\n          const dataLabel = DATA_LABELS[key];\n          if (!dataLabel) {\n            return null;\n          }\n          const { label, address } = dataLabel;\n          return (\n            <LabelValue\n              key={key}\n              label={label + ''}\n              value={address ? value?.toBase58() : value}\n              link={address}\n              onClick={() => address && onOpenAddress(value?.toBase58())}\n            />\n          );\n        })}\n    </>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { useWallet, useWalletPublicKeys } from '../../utils/wallet';\n\nconst TYPE_LABELS = {\n  cancelOrder: 'Cancel order',\n  newOrder: 'Place order',\n  settleFunds: 'Settle funds',\n  matchOrders: 'Match orders',\n};\n\nconst DATA_LABELS = {\n  side: { label: 'Side', address: false },\n  orderId: { label: 'Order Id', address: false },\n  limit: { label: 'Limit', address: false },\n  basePubkey: { label: 'Base wallet', address: true },\n  quotePubkey: { label: 'Quote wallet', address: true },\n};\n\nexport default function DexInstruction({ instruction, onOpenAddress }) {\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n  const { type, data, market, marketInfo } = instruction;\n\n  const marketLabel =\n    (marketInfo &&\n      marketInfo?.name + (marketInfo?.deprecated ? ' (deprecated)' : '')) ||\n    market?._decoded?.ownAddress?.toBase58() ||\n    'Unknown';\n\n  const getAddressValue = (address) => {\n    const isOwned = publicKeys.some((ownedKey) => ownedKey.equals(address));\n    const isOwner = wallet.publicKey.equals(address);\n    return isOwner\n      ? 'This wallet'\n      : (isOwned ? '(Owned) ' : '') + address?.toBase58();\n  };\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {TYPE_LABELS[type]}\n      </Typography>\n      <LabelValue\n        label=\"Market\"\n        value={marketLabel}\n        link={true}\n        onClick={() =>\n          onOpenAddress(\n            (marketInfo?.address || market?._decoded?.ownAddress)?.toBase58(),\n          )\n        }\n      />\n      {data &&\n        Object.entries(data).map(([key, value]) => {\n          const dataLabel = DATA_LABELS[key];\n          if (!dataLabel) {\n            return null;\n          }\n          const { label, address } = dataLabel;\n          return (\n            <LabelValue\n              key={key}\n              label={label + ''}\n              value={address ? getAddressValue(value) : value + ''}\n              link={address}\n              onClick={() => address && onOpenAddress(value?.toBase58())}\n            />\n          );\n        })}\n    </>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { useWallet, useWalletPublicKeys } from '../../utils/wallet';\nimport { TOKEN_MINTS } from '@project-serum/serum';\n\nconst TYPE_LABELS = {\n  initializeMint: 'Initialize mint',\n  initializeAccount: 'Initialize account',\n  transfer: 'Transfer',\n  approve: 'Approve',\n  mintTo: 'Mint to',\n  closeAccount: 'Close account',\n};\n\nconst DATA_LABELS = {\n  amount: { label: 'Amount', address: false },\n  accountPubkey: { label: 'Account', address: true },\n  mintPubkey: { label: 'Mint', address: true },\n  sourcePubkey: { label: 'Source', address: true },\n  destinationPubkey: { label: 'Destination', address: true },\n  ownerPubkey: { label: 'Owner', address: true },\n};\n\nexport default function TokenInstruction({ instruction, onOpenAddress }) {\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n  const { type, data } = instruction;\n\n  const getAddressValue = (address) => {\n    const tokenMint = TOKEN_MINTS.find((token) =>\n      token.address.equals(address),\n    );\n    const isOwned = publicKeys.some((ownedKey) => ownedKey.equals(address));\n    const isOwner = wallet.publicKey.equals(address);\n    return tokenMint\n      ? tokenMint.name\n      : isOwner\n      ? 'This wallet'\n      : (isOwned ? '(Owned) ' : '') + address?.toBase58();\n  };\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {TYPE_LABELS[type]}\n      </Typography>\n      {data &&\n        Object.entries(data).map(([key, value]) => {\n          const dataLabel = DATA_LABELS[key];\n          if (!dataLabel) {\n            return null;\n          }\n          const { label, address } = dataLabel;\n          return (\n            <LabelValue\n              key={key}\n              label={label + ''}\n              value={address ? getAddressValue(value) : value}\n              link={address}\n              onClick={() => address && onOpenAddress(value?.toBase58())}\n            />\n          );\n        })}\n    </>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useWallet, useWalletPublicKeys } from '../utils/wallet';\nimport { decodeMessage } from '../utils/transactions';\nimport { useConnection, useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport {\n  Divider,\n  FormControlLabel,\n  SnackbarContent,\n  Switch,\n  Typography,\n} from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport { makeStyles } from '@material-ui/core/styles';\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport NewOrder from '../components/instructions/NewOrder';\nimport UnknownInstruction from '../components/instructions/UnknownInstruction';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport SystemInstruction from '../components/instructions/SystemInstruction';\nimport DexInstruction from '../components/instructions/DexInstruction';\nimport TokenInstruction from '../components/instructions/TokenInstruction';\nimport { useLocalStorageState } from '../utils/utils';\n\nexport default function PopupPage({ opener }) {\n  const wallet = useWallet();\n\n  const origin = useMemo(() => {\n    let params = new URLSearchParams(window.location.hash.slice(1));\n    return params.get('origin');\n  }, []);\n  const postMessage = useCallback(\n    (message) => {\n      opener.postMessage({ jsonrpc: '2.0', ...message }, origin);\n    },\n    [opener, origin],\n  );\n\n  const [connectedAccount, setConnectedAccount] = useState(null);\n  const hasConnectedAccount = !!connectedAccount;\n  const [requests, setRequests] = useState([]);\n  const [autoApprove, setAutoApprove] = useState(false);\n\n  // Send a disconnect event if this window is closed, this component is\n  // unmounted, or setConnectedAccount(null) is called.\n  useEffect(() => {\n    if (hasConnectedAccount) {\n      function unloadHandler() {\n        postMessage({ method: 'disconnected' });\n      }\n      window.addEventListener('beforeunload', unloadHandler);\n      return () => {\n        unloadHandler();\n        window.removeEventListener('beforeunload', unloadHandler);\n      };\n    }\n  }, [hasConnectedAccount, postMessage]);\n\n  // Disconnect if the user switches to a different wallet.\n  useEffect(() => {\n    if (connectedAccount && !connectedAccount.equals(wallet.publicKey)) {\n      setConnectedAccount(null);\n    }\n  }, [connectedAccount, wallet]);\n\n  // Push requests from the parent window into a queue.\n  useEffect(() => {\n    function messageHandler(e) {\n      if (e.origin === origin && e.source === window.opener) {\n        if (\n          e.data.method !== 'signTransaction' &&\n          e.data.method !== 'signAllTransactions'\n        ) {\n          postMessage({ error: 'Unsupported method', id: e.data.id });\n        }\n\n        setRequests((requests) => [...requests, e.data]);\n      }\n    }\n    window.addEventListener('message', messageHandler);\n    return () => window.removeEventListener('message', messageHandler);\n  }, [origin, postMessage]);\n\n  if (!connectedAccount || !connectedAccount.equals(wallet.publicKey)) {\n    // Approve the parent page to connect to this wallet.\n    function connect(autoApprove) {\n      setConnectedAccount(wallet.publicKey);\n      postMessage({\n        method: 'connected',\n        params: { publicKey: wallet.publicKey.toBase58(), autoApprove },\n      });\n      setAutoApprove(autoApprove);\n      focusParent();\n    }\n\n    return <ApproveConnectionForm origin={origin} onApprove={connect} />;\n  }\n\n  if (requests.length > 0) {\n    const request = requests[0];\n    assert(\n      request.method === 'signTransaction' ||\n        request.method === 'signAllTransactions',\n    );\n\n    let messages =\n      request.method === 'signTransaction'\n        ? [bs58.decode(request.params.message)]\n        : request.params.messages.map((m) => bs58.decode(m));\n\n    async function onApprove() {\n      setRequests((requests) => requests.slice(1));\n      if (request.method === 'signTransaction') {\n        sendSignature(messages[0]);\n      } else {\n        sendAllSignatures(messages);\n      }\n      if (requests.length === 1) {\n        focusParent();\n      }\n    }\n\n    async function sendSignature(message) {\n      postMessage({\n        result: {\n          signature: await wallet.createSignature(message),\n          publicKey: wallet.publicKey.toBase58(),\n        },\n        id: request.id,\n      });\n    }\n\n    async function sendAllSignatures(messages) {\n      const signatures = await Promise.all(\n        messages.map((m) => wallet.createSignature(m)),\n      );\n      postMessage({\n        result: {\n          signatures,\n          publicKey: wallet.publicKey.toBase58(),\n        },\n        id: request.id,\n      });\n    }\n\n    function sendReject() {\n      setRequests((requests) => requests.slice(1));\n      postMessage({\n        error: 'Transaction cancelled',\n        id: request.id,\n      });\n      if (requests.length === 1) {\n        focusParent();\n      }\n    }\n    return (\n      <ApproveSignatureForm\n        key={request.id}\n        autoApprove={autoApprove}\n        origin={origin}\n        messages={messages}\n        onApprove={onApprove}\n        onReject={sendReject}\n      />\n    );\n  }\n\n  return (\n    <Typography>Please keep this window open in the background.</Typography>\n  );\n}\n\n/**\n * Switch focus to the parent window. This requires that the parent runs\n * `window.name = 'parent'` before opening the popup.\n */\nfunction focusParent() {\n  window.open('', 'parent');\n}\n\nconst useStyles = makeStyles((theme) => ({\n  connection: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    textAlign: 'center',\n  },\n  transaction: {\n    wordBreak: 'break-all',\n  },\n  approveButton: {\n    backgroundColor: '#43a047',\n    color: 'white',\n  },\n  actions: {\n    justifyContent: 'space-between',\n  },\n  snackbarRoot: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  warningMessage: {\n    margin: theme.spacing(1),\n    color: theme.palette.text.primary,\n  },\n  warningIcon: {\n    marginRight: theme.spacing(1),\n    fontSize: 24,\n  },\n  warningTitle: {\n    color: theme.palette.warning.light,\n    fontWeight: 600,\n    fontSize: 16,\n    alignItems: 'center',\n    display: 'flex',\n  },\n  warningContainer: {\n    marginTop: theme.spacing(1),\n  },\n  divider: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction ApproveConnectionForm({ origin, onApprove }) {\n  const wallet = useWallet();\n  const classes = useStyles();\n  const [autoApprove, setAutoApprove] = useState(false);\n  let [dismissed, setDismissed] = useLocalStorageState(\n    'dismissedAutoApproveWarning',\n    false,\n  );\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" component=\"h1\" gutterBottom>\n          Allow this site to access your Solana account?\n        </Typography>\n        <div className={classes.connection}>\n          <Typography>{origin}</Typography>\n          <ImportExportIcon fontSize=\"large\" />\n          <Typography>{wallet.publicKey.toBase58()}</Typography>\n        </div>\n        <Typography>Only connect with sites you trust.</Typography>\n        <Divider className={classes.divider} />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={autoApprove}\n              onChange={() => setAutoApprove(!autoApprove)}\n              color=\"primary\"\n            />\n          }\n          label={`Automatically approve transactions from ${origin}`}\n        />\n        {!dismissed && autoApprove && (\n          <SnackbarContent\n            className={classes.warningContainer}\n            message={\n              <div>\n                <span className={classes.warningTitle}>\n                  <WarningIcon className={classes.warningIcon} />\n                  Use at your own risk.\n                </span>\n                <Typography className={classes.warningMessage}>\n                  This setting allows sending some transactions on your behalf\n                  without requesting your permission for the remainder of this\n                  session.\n                </Typography>\n              </div>\n            }\n            action={[\n              <Button onClick={() => setDismissed('1')}>I understand</Button>,\n            ]}\n            classes={{ root: classes.snackbarRoot }}\n          />\n        )}\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button onClick={window.close}>Cancel</Button>\n        <Button\n          color=\"primary\"\n          onClick={() => onApprove(autoApprove)}\n          disabled={!dismissed && autoApprove}\n        >\n          Connect\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nfunction isSafeInstruction(publicKeys, owner, txInstructions) {\n  let unsafe = false;\n  const states = {\n    CREATED: 0,\n    OWNED: 1,\n    CLOSED_TO_OWNED_DESTINATION: 2,\n  };\n  const accountStates = {};\n\n  function isOwned(pubkey) {\n    if (!pubkey) {\n      return false;\n    }\n    if (\n      publicKeys?.some((ownedAccountPubkey) =>\n        ownedAccountPubkey.equals(pubkey),\n      )\n    ) {\n      return true;\n    }\n    return accountStates[pubkey.toBase58()] === states.OWNED;\n  }\n\n  txInstructions.forEach((instructions) => {\n    instructions.forEach((instruction) => {\n      if (!instruction) {\n        unsafe = true;\n      } else {\n        if (instruction.type === 'raydium') {\n          // Whitelist raydium for now.\n        } else if (['cancelOrder', 'matchOrders'].includes(instruction.type)) {\n          // It is always considered safe to cancel orders, match orders\n        } else if (instruction.type === 'systemCreate') {\n          let { newAccountPubkey } = instruction.data;\n          if (!newAccountPubkey) {\n            unsafe = true;\n          } else {\n            accountStates[newAccountPubkey.toBase58()] = states.CREATED;\n          }\n        } else if (instruction.type === 'newOrder') {\n          // New order instructions are safe if the owner is this wallet\n          let { openOrdersPubkey, ownerPubkey } = instruction.data;\n          if (ownerPubkey && owner.equals(ownerPubkey)) {\n            accountStates[openOrdersPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'initializeAccount') {\n          // New SPL token accounts are only considered safe if they are owned by this wallet and newly created\n          let { ownerPubkey, accountPubkey } = instruction.data;\n          if (\n            owner &&\n            ownerPubkey &&\n            owner.equals(ownerPubkey) &&\n            accountPubkey &&\n            accountStates[accountPubkey.toBase58()] === states.CREATED\n          ) {\n            accountStates[accountPubkey.toBase58()] = states.OWNED;\n          } else {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'settleFunds') {\n          // Settling funds is only safe if the destinations are owned\n          let { basePubkey, quotePubkey } = instruction.data;\n          if (!isOwned(basePubkey) || !isOwned(quotePubkey)) {\n            unsafe = true;\n          }\n        } else if (instruction.type === 'closeAccount') {\n          // Closing is only safe if the destination is owned\n          let { sourcePubkey, destinationPubkey } = instruction.data;\n          if (isOwned(destinationPubkey)) {\n            accountStates[sourcePubkey.toBase58()] =\n              states.CLOSED_TO_OWNED_DESTINATION;\n          } else {\n            unsafe = true;\n          }\n        } else {\n          unsafe = true;\n        }\n      }\n    });\n  });\n\n  // Check that all accounts are owned\n  if (\n    Object.values(accountStates).some(\n      (state) =>\n        ![states.CLOSED_TO_OWNED_DESTINATION, states.OWNED].includes(state),\n    )\n  ) {\n    unsafe = true;\n  }\n\n  return !unsafe;\n}\n\nfunction ApproveSignatureForm({\n  origin,\n  messages,\n  onApprove,\n  onReject,\n  autoApprove,\n}) {\n  const classes = useStyles();\n  const explorerUrlSuffix = useSolanaExplorerUrlSuffix();\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [publicKeys] = useWalletPublicKeys();\n\n  const [parsing, setParsing] = useState(true);\n  // An array of arrays, where each element is the set of instructions for a\n  // single transaction.\n  const [txInstructions, setTxInstructions] = useState(null);\n  const buttonRef = useRef();\n\n  const isMultiTx = messages.length > 1;\n\n  useEffect(() => {\n    Promise.all(messages.map((m) => decodeMessage(connection, wallet, m))).then(\n      (txInstructions) => {\n        setTxInstructions(txInstructions);\n        setParsing(false);\n      },\n    );\n  }, [messages, connection, wallet]);\n\n  const validator = useMemo(() => {\n    return {\n      safe:\n        publicKeys &&\n        txInstructions &&\n        isSafeInstruction(publicKeys, wallet.publicKey, txInstructions),\n    };\n  }, [publicKeys, txInstructions, wallet]);\n\n  useEffect(() => {\n    if (validator.safe && autoApprove) {\n      console.log('Auto approving safe transaction');\n      onApprove();\n    } else {\n      // brings window to front when we receive new instructions\n      // this needs to be executed from wallet instead of adapter\n      // to ensure chrome brings window to front\n      window.focus();\n\n      // scroll to approve button and focus it to enable approve with enter\n      if (buttonRef.current) {\n        buttonRef.current.scrollIntoView({ behavior: 'smooth' });\n        setTimeout(() => buttonRef.current.focus(), 50);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [validator, autoApprove, buttonRef]);\n\n  const onOpenAddress = (address) => {\n    address &&\n      window.open(\n        'https://explorer.solana.com/address/' + address + explorerUrlSuffix,\n        '_blank',\n      );\n  };\n\n  const getContent = (instruction) => {\n    switch (instruction?.type) {\n      case 'cancelOrder':\n      case 'matchOrders':\n      case 'settleFunds':\n        return (\n          <DexInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'closeAccount':\n      case 'initializeAccount':\n      case 'transfer':\n      case 'approve':\n      case 'mintTo':\n        return (\n          <TokenInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'systemCreate':\n      case 'systemTransfer':\n        return (\n          <SystemInstruction\n            instruction={instruction}\n            onOpenAddress={onOpenAddress}\n          />\n        );\n      case 'newOrder':\n        return (\n          <NewOrder instruction={instruction} onOpenAddress={onOpenAddress} />\n        );\n      default:\n        return <UnknownInstruction instruction={instruction} />;\n    }\n  };\n\n  const txLabel = (idx) => {\n    return (\n      <>\n        <Typography variant=\"h6\" gutterBottom>\n          Transaction {idx.toString()}\n        </Typography>\n        <Divider style={{ marginTop: 20 }} />\n      </>\n    );\n  };\n\n  const txListItem = (instructions, txIdx) => {\n    const ixs = instructions.map((instruction, i) => (\n      <Box style={{ marginTop: 20 }} key={i}>\n        {getContent(instruction)}\n        <Divider style={{ marginTop: 20 }} />\n      </Box>\n    ));\n\n    if (!isMultiTx) {\n      return ixs;\n    }\n\n    return (\n      <Box style={{ marginTop: 20 }} key={txIdx}>\n        {txLabel(txIdx)}\n        {ixs}\n      </Box>\n    );\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        {parsing ? (\n          <>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'flex-end',\n                marginBottom: 20,\n              }}\n            >\n              <CircularProgress style={{ marginRight: 20 }} />\n              <Typography\n                variant=\"subtitle1\"\n                style={{ fontWeight: 'bold' }}\n                gutterBottom\n              >\n                Parsing transaction{isMultiTx > 0 ? 's' : ''}:\n              </Typography>\n            </div>\n            {messages.map((message, idx) => (\n              <Typography key={idx} style={{ wordBreak: 'break-all' }}>\n                {bs58.encode(message)}\n              </Typography>\n            ))}\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h6\" gutterBottom>\n              {txInstructions\n                ? `${origin} wants to:`\n                : `Unknown transaction data`}\n            </Typography>\n            {txInstructions ? (\n              txInstructions.map((instructions, txIdx) =>\n                txListItem(instructions, txIdx),\n              )\n            ) : (\n              <>\n                <Typography\n                  variant=\"subtitle1\"\n                  style={{ fontWeight: 'bold' }}\n                  gutterBottom\n                >\n                  Unknown transaction{isMultiTx > 0 ? 's' : ''}:\n                </Typography>\n                {messages.map((message) => (\n                  <Typography style={{ wordBreak: 'break-all' }}>\n                    {bs58.encode(message)}\n                  </Typography>\n                ))}\n              </>\n            )}\n          </>\n        )}\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button onClick={onReject}>Cancel</Button>\n        <Button\n          ref={buttonRef}\n          className={classes.approveButton}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onApprove}\n        >\n          Approve{isMultiTx ? ' All' : ''}\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { Suspense } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport NavigationFrame from './components/NavigationFrame';\nimport { ConnectionProvider } from './utils/connection';\nimport WalletPage from './pages/WalletPage';\nimport { useWallet, WalletProvider } from './utils/wallet';\nimport LoadingIndicator from './components/LoadingIndicator';\nimport { SnackbarProvider } from 'notistack';\nimport PopupPage from './pages/PopupPage';\nimport LoginPage from './pages/LoginPage';\n\nexport default function App() {\n  // TODO: add toggle for dark mode\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n          primary: blue,\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  // Disallow rendering inside an iframe to prevent clickjacking.\n  if (window.self !== window.top) {\n    return null;\n  }\n\n  return (\n    <Suspense fallback={<LoadingIndicator />}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n\n        <ConnectionProvider>\n          <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n            <WalletProvider>\n              <NavigationFrame>\n                <Suspense fallback={<LoadingIndicator />}>\n                  <PageContents />\n                </Suspense>\n              </NavigationFrame>\n            </WalletProvider>\n          </SnackbarProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n    </Suspense>\n  );\n}\n\nfunction PageContents() {\n  const wallet = useWallet();\n  if (!wallet) {\n    return <LoginPage />;\n  }\n  if (window.opener) {\n    return <PopupPage opener={window.opener} />;\n  }\n  return <WalletPage />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import EventEmitter from 'events';\nimport { useConnectionConfig, MAINNET_URL } from '../connection';\nimport { useListener } from '../utils';\nimport { useCallback } from 'react';\n\nexport const TOKENS = {\n  [MAINNET_URL]: [\n    {\n      mintAddress: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n      tokenName: 'Serum',\n      tokenSymbol: 'SRM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png',\n    },\n    {\n      mintAddress: 'MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L',\n      tokenName: 'MegaSerum',\n      tokenSymbol: 'MSRM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png',\n    },\n    {\n      tokenSymbol: 'BTC',\n      mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\n      tokenName: 'Wrapped Bitcoin',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/bitcoin/info/logo.png',\n    },\n    {\n      tokenSymbol: 'ETH',\n      mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\n      tokenName: 'Wrapped Ethereum',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n    },\n    {\n      tokenSymbol: 'FTT',\n      mintAddress: 'AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3',\n      tokenName: 'Wrapped FTT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9/logo.png',\n    },\n    {\n      tokenSymbol: 'YFI',\n      mintAddress: '3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB',\n      tokenName: 'Wrapped YFI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e/logo.png',\n    },\n    {\n      tokenSymbol: 'LINK',\n      mintAddress: 'CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG',\n      tokenName: 'Wrapped Chainlink',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x514910771AF9Ca656af840dff83E8264EcF986CA/logo.png',\n    },\n    {\n      tokenSymbol: 'XRP',\n      mintAddress: 'Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8',\n      tokenName: 'Wrapped XRP',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ripple/info/logo.png',\n    },\n    {\n      tokenSymbol: 'USDT',\n      mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n      tokenName: 'Wrapped USDT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png',\n    },\n    {\n      tokenSymbol: 'USDC',\n      mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n      tokenName: 'USD Coin',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n    },\n    {\n      tokenSymbol: 'WUSDC',\n      mintAddress: 'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n      tokenName: 'Wrapped USDC',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n      deprecated: true,\n    },\n    {\n      tokenSymbol: 'SUSHI',\n      mintAddress: 'AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy',\n      tokenName: 'Wrapped SUSHI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B3595068778DD592e39A122f4f5a5cF09C90fE2/logo.png',\n    },\n    {\n      tokenSymbol: 'ALEPH',\n      mintAddress: 'CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K',\n      tokenName: 'Wrapped ALEPH',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/6996a371cd02f516506a8f092eeb29888501447c/blockchains/nuls/assets/NULSd6HgyZkiqLnBzTaeSQfx1TNg2cqbzq51h/logo.png',\n    },\n    {\n      tokenSymbol: 'SXP',\n      mintAddress: 'SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX',\n      tokenName: 'Wrapped SXP',\n      icon:\n        'https://github.com/trustwallet/assets/raw/b0ab88654fe64848da80d982945e4db06e197d4f/blockchains/ethereum/assets/0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9/logo.png',\n    },\n    {\n      tokenSymbol: 'HGET',\n      mintAddress: 'BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN',\n      tokenName: 'Wrapped HGET',\n    },\n    {\n      tokenSymbol: 'CREAM',\n      mintAddress: '5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv',\n      tokenName: 'Wrapped CREAM',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/4c82c2a409f18a4dd96a504f967a55a8fe47026d/blockchains/smartchain/assets/0xd4CB328A82bDf5f03eB737f37Fa6B370aef3e888/logo.png',\n    },\n    {\n      tokenSymbol: 'UBXT',\n      mintAddress: '873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei',\n      tokenName: 'Wrapped UBXT',\n    },\n    {\n      tokenSymbol: 'HNT',\n      mintAddress: 'HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e',\n      tokenName: 'Wrapped HNT',\n    },\n    {\n      tokenSymbol: 'FRONT',\n      mintAddress: '9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw',\n      tokenName: 'Wrapped FRONT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/6e375e4e5fb0ffe09ed001bae1ef8ca1d6c86034/blockchains/ethereum/assets/0xf8C3527CC04340b208C854E985240c02F7B7793f/logo.png',\n    },\n    {\n      tokenSymbol: 'AKRO',\n      mintAddress: '6WNVCuxCGJzNjmMZoKyhZJwvJ5tYpsLyAtagzYASqBoF',\n      tokenName: 'Wrapped AKRO',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/878dcab0fab90e6593bcb9b7d941be4915f287dc/blockchains/ethereum/assets/0xb2734a4Cec32C81FDE26B0024Ad3ceB8C9b34037/logo.png',\n    },\n    {\n      tokenSymbol: 'HXRO',\n      mintAddress: 'DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc',\n      tokenName: 'Wrapped HXRO',\n    },\n    {\n      tokenSymbol: 'UNI',\n      mintAddress: 'DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw',\n      tokenName: 'Wrapped UNI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png',\n    },\n    {\n      tokenSymbol: 'MATH',\n      mintAddress: 'GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza',\n      tokenName: 'Wrapped MATH',\n    },\n    {\n      tokenSymbol: 'TOMO',\n      mintAddress: 'GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd',\n      tokenName: 'Wrapped TOMO',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/08d734b5e6ec95227dc50efef3a9cdfea4c398a1/blockchains/tomochain/info/logo.png',\n    },\n    {\n      tokenSymbol: 'LUA',\n      mintAddress: 'EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX',\n      tokenName: 'Wrapped LUA',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/2d2491130e6beda208ba4fc6df028a82a0106ab6/blockchains/ethereum/assets/0xB1f66997A5760428D3a87D68b90BfE0aE64121cC/logo.png',\n    },\n    {\n      tokenSymbol: 'FIDA',\n      mintAddress: 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp',\n      tokenName: 'Bonfida Token',\n      icon:\n        'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/fida.svg',\n    },\n    {\n      tokenSymbol: 'LQID',\n      mintAddress: 'A6aY2ceogBz1VaXBxm1j2eJuNZMRqrWUAnKecrMH85zj',\n      tokenName: 'LQID',\n      icon:\n        'https://raw.githubusercontent.com/dr497/awesome-serum-markets/master/icons/lqid.svg',\n    },\n    {\n      tokenSymbol: 'SECO',\n      mintAddress: '7CnFGR9mZWyAtWxPcVuTewpyC3A3MDW4nLsu5NY6PDbd',\n      tokenName: 'Serum Ecosystem Pool Token',\n    },\n    {\n      tokenSymbol: 'HOLY',\n      mintAddress: '3GECTP7H4Tww3w8jEPJCJtXUtXxiZty31S9szs84CcwQ',\n      tokenName: 'Holy Trinity Pool',\n    },\n    {\n      tokenSymbol: 'KIN',\n      mintAddress: 'kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6',\n      tokenName: 'KIN',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/kin/info/logo.png',\n    },\n    {\n      tokenSymbol: 'MAPS',\n      mintAddress: 'MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb',\n      tokenName: 'Maps.me Token',\n    },\n    {\n      tokenSymbol: 'RAY',\n      mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\n      tokenName: 'Raydium',\n      icon:\n        'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg',\n    },\n    {\n      tokenSymbol: 'RAY-USDT',\n      mintAddress: 'CzPDyvotTcxNqtPne32yUiEVQ6jk42HZi1Y3hUu7qf7f',\n      tokenName: 'Raydium USDT Liquidity Pool',\n      icon:\n        'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg',\n    },\n    {\n      tokenSymbol: 'RAY-USDC',\n      mintAddress: 'FgmBnsF5Qrnv8X9bomQfEtQTQjNNiBCWRKGpzPnE5BDg',\n      tokenName: 'Raydium USDC Liquidity Pool',\n      icon:\n        'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg',\n    },\n    {\n      tokenSymbol: 'RAY-SRM',\n      mintAddress: '5QXBMXuCL7zfAk39jEVVEvcrz1AvBGgT9wAhLLHLyyUJ',\n      tokenName: 'Raydium Serum Liquidity Pool',\n      icon:\n        'https://raw.githubusercontent.com/raydium-io/media-assets/master/logo.svg',\n    },\n  ],\n};\n\nconst customTokenNamesByNetwork = JSON.parse(\n  localStorage.getItem('tokenNames') ?? '{}',\n);\n\nconst nameUpdated = new EventEmitter();\nnameUpdated.setMaxListeners(100);\n\nexport function useTokenName(mint) {\n  const { endpoint } = useConnectionConfig();\n  useListener(nameUpdated, 'update');\n  return getTokenName(mint, endpoint);\n}\n\nexport function getTokenName(mint, endpoint) {\n  if (!mint) {\n    return { name: null, symbol: null };\n  }\n\n  let info = customTokenNamesByNetwork?.[endpoint]?.[mint.toBase58()];\n  let match = TOKENS?.[endpoint]?.find(\n    (token) => token.mintAddress === mint.toBase58(),\n  );\n  if (match && (!info || match.deprecated)) {\n    info = { name: match.tokenName, symbol: match.tokenSymbol };\n  }\n  return { name: info?.name, symbol: info?.symbol };\n}\n\nexport function useUpdateTokenName() {\n  const { endpoint } = useConnectionConfig();\n  return useCallback(\n    function updateTokenName(mint, name, symbol) {\n      if (!name || !symbol) {\n        if (name) {\n          symbol = name;\n        } else if (symbol) {\n          name = symbol;\n        } else {\n          return;\n        }\n      }\n      if (!customTokenNamesByNetwork[endpoint]) {\n        customTokenNamesByNetwork[endpoint] = {};\n      }\n      customTokenNamesByNetwork[endpoint][mint.toBase58()] = { name, symbol };\n      localStorage.setItem(\n        'tokenNames',\n        JSON.stringify(customTokenNamesByNetwork),\n      );\n      nameUpdated.emit('update');\n    },\n    [endpoint],\n  );\n}\n","import React, { useState } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useEffectAfterTimeout } from '../utils/utils';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function LoadingIndicator({\n  height = null,\n  delay = 500,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [visible, setVisible] = useState(false);\n\n  useEffectAfterTimeout(() => setVisible(true), delay);\n\n  let style = {};\n  if (height) {\n    style.height = height;\n  }\n\n  if (!visible) {\n    return height ? <div style={style} /> : null;\n  }\n\n  return (\n    <div className={classes.root} style={style} {...rest}>\n      <CircularProgress />\n    </div>\n  );\n}\n","import { getUnlockedMnemonicAndSeed } from './../wallet-seed';\nimport * as bip32 from 'bip32';\nimport nacl from 'tweetnacl';\nimport { Account } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { derivePath } from 'ed25519-hd-key';\n\nexport const DERIVATION_PATH = {\n  deprecated: undefined,\n  bip44: 'bip44',\n  bip44Change: 'bip44Change',\n};\n\nexport function getAccountFromSeed(\n  seed,\n  walletIndex,\n  dPath = undefined,\n  accountIndex = 0,\n) {\n  const derivedSeed = deriveSeed(seed, walletIndex, dPath, accountIndex);\n  return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);\n}\n\nfunction deriveSeed(seed, walletIndex, derivationPath, accountIndex) {\n  switch (derivationPath) {\n    case DERIVATION_PATH.deprecated:\n      const path = `m/501'/${walletIndex}'/0/${accountIndex}`;\n      return bip32.fromSeed(seed).derivePath(path).privateKey;\n    case DERIVATION_PATH.bip44:\n      const path44 = `m/44'/501'/${walletIndex}'`;\n      return derivePath(path44, seed).key;\n    case DERIVATION_PATH.bip44Change:\n      const path44Change = `m/44'/501'/${walletIndex}'/0'`;\n      return derivePath(path44Change, seed).key;\n    default:\n      throw new Error(`invalid derivation path: ${derivationPath}`);\n  }\n}\n\nexport class LocalStorageWalletProvider {\n  constructor(args) {\n    const { seed } = getUnlockedMnemonicAndSeed();\n    this.account = args.account;\n    this.listAddresses = async (walletCount) => {\n      const seedBuffer = Buffer.from(seed, 'hex');\n      return [...Array(walletCount).keys()].map((walletIndex) => {\n        let address = getAccountFromSeed(seedBuffer, walletIndex).publicKey;\n        let name = localStorage.getItem(`name${walletIndex}`);\n        return { index: walletIndex, address, name };\n      });\n    };\n  }\n\n  init = async () => {\n    return this;\n  };\n\n  get publicKey() {\n    return this.account.publicKey;\n  }\n\n  signTransaction = async (transaction) => {\n    transaction.partialSign(this.account);\n    return transaction;\n  };\n\n  createSignature = (message) => {\n    return bs58.encode(nacl.sign.detached(message, this.account.secretKey));\n  };\n}\n"],"sourceRoot":""}